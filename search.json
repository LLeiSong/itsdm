[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 itsdm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/introduction_of_itsdm.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Introduction of itsdm with a virtual species","text":"Install missing packages","code":"install.packages('rnaturalearth') install.packages('here') install.packages('virtualspecies') library(sf, quietly = T) library(itsdm, quietly = T) library(ggplot2, quietly = T) library(dplyr, quietly = T) select <- dplyr::select"},{"path":"/articles/introduction_of_itsdm.html","id":"prepare-environmental-variables","dir":"Articles","previous_headings":"","what":"Prepare environmental variables","title":"Introduction of itsdm with a virtual species","text":"use packages like rnaturalearth quickly get boundary countries regions. can also read study area boundary sure. Providing boundary function worldclim2 allow download files worldclim version 2 clipping area. species modeling, people usually want remove strong correlations environmental variables. dim_reduce function need. function either reduce dimension environmental variable stack according bunch observations. also allows set desirable threshold. Note works numeric variables. categorical variables less risk high correlation others, usually prefer keep categorical variables.","code":"library(stars, quietly = T) library(rnaturalearth, quietly = T)  # Get Africa continent af <- ne_countries(   continent = 'africa', returnclass = 'sf') %>%   filter(admin != 'Madagascar') # remove Madagascar  # Union countries to continent af_bry <- st_buffer(af, 0.1) %>%   st_union() %>%   st_as_sf() %>%   rename(geometry = x) %>%   st_make_valid()  bios <- worldclim2(var = 'bio', bry = af_bry,                    path = tempdir(),                    nm_mark = 'africa')  # Plot BIO1 to check the variables # plot(bios %>% slice('band', 1), #      main = st_get_dimension_values(bios, 'band')[1]) library(stars, quietly = T) # An example of reducing dimensions ## Here we didn't set samples, so use whole image bios_reduce <- dim_reduce(   bios, threshold = 0.6,   preferred_vars = c('bio1', 'bio12', 'bio5'))  # Returned ReducedImageStack object bios_reduce #> Dimension reduction #> Correlation threshold: 0.6 #> Original variables: bio1, bio2, bio3, bio4, bio5, bio6, bio7, bio8, bio9, #> bio10, bio11, bio12, bio13, bio14, bio15, bio16, bio17, bio18, bio19 #> Variables after dimension reduction: bio1, bio12, bio9, bio14, bio15 #> ================================================================================ #> Reduced correlations: #>        bio1 bio12  bio9 bio14 bio15 #> bio1   1.00 -0.04  0.50 -0.07  0.44 #> bio12 -0.04  1.00 -0.03  0.56 -0.16 #> bio9   0.50 -0.03  1.00  0.01 -0.06 #> bio14 -0.07  0.56  0.01  1.00 -0.40 #> bio15  0.44 -0.16 -0.06 -0.40  1.00  # img_reduced of ReducedImageStack is the raster stack bios_reduce$img_reduced #> stars object with 3 dimensions and 1 attribute #> attribute(s): #>                Min.  1st Qu.   Median     Mean  3rd Qu. Max.   NA's #> reduced_image     0 17.75392 25.91388 154.5419 83.09974 4347 447385 #> dimension(s): #>      from   to offset     delta refsys point         values x/y #> x     975 1388   -180  0.166667 WGS 84 FALSE           NULL [x] #> y     316  750     90 -0.166667 WGS 84 FALSE           NULL [y] #> band    1    5     NA        NA     NA    NA bio1,...,bio15"},{"path":"/articles/introduction_of_itsdm.html","id":"creating-the-virtual-species","dir":"Articles","previous_headings":"","what":"Creating the virtual species","title":"Introduction of itsdm with a virtual species","text":"Using virtual species crucial method ecological studies. First, let’s create virtual species using package virtualspecies know exactly happening.","code":"library(here, quietly = T) library(virtualspecies, quietly = T)  # Subset environmental variables to use bios_sub <- bios %>% slice('band', c(1, 5, 12, 15)) bios_sub <- stack(as(split(bios_sub), 'Spatial'))  # Formatting of the response functions set.seed(10) my.parameters <- formatFunctions(   bio1 = c(fun = 'dnorm', mean = 25, sd = 5),   bio5 = c(fun = 'dnorm', mean = 35, sd = 5),   bio12 = c(fun = 'dnorm', mean = 1000, sd = 500),   bio15 = c(fun = 'dnorm', mean = 100, sd = 50))  # Generation of the virtual species set.seed(10) my.species <- generateSpFromFun(   raster.stack = bios_sub,   parameters = my.parameters,   plot = F)  # Conversion to presence-absence set.seed(10) my.species <- convertToPA(   my.species,   beta = 0.7,   plot = F)  # Check maps of this virtual species if you like # plot(my.species)  # Check response curves plotResponse(my.species)"},{"path":"/articles/introduction_of_itsdm.html","id":"generate-pseudo-samples-for-virtual-species","dir":"Articles","previous_headings":"","what":"Generate pseudo samples for virtual species","title":"Introduction of itsdm with a virtual species","text":"know, commonly sampling bias observation errors. People use multiple methods reduce disturbances samples. example, , use function suspicious_env_outliers detect /remove possible environmental outliers. step used strategies sample cleaning.  Unfortunately, bio1 bio5 strong correlation . might affect model explanation later.","code":"# Sampling set.seed(10) po.points <- sampleOccurrences(   my.species,   n = 2000,   type = \"presence only\",   plot = FALSE) po_df <- po.points$sample.points %>%   select(x, y) %>%   mutate(id = row_number()) head(po_df) #>           x          y id #> 1 -6.083333  11.083333  1 #> 2 -5.750000  10.250000  2 #> 3 38.750000  -6.750000  3 #> 4 39.250000 -10.416667  4 #> 5 26.583333  -8.583333  5 #> 6  0.250000   9.083333  6 # Get environmental variable stack variables <- bios %>% slice('band', c(1, 5,  12, 15))  # Check outliers occ_outliers <- suspicious_env_outliers(   po_df,   variables = variables,   z_outlier = 5,   outliers_print = 4,   visualize = FALSE) #> Reporting top 4 outliers [out of 6 found] #>  #> row [463] - suspicious column: [bio5] - suspicious value: [32.78] #>  distribution: 95.714% >= 36.01 - [mean: 37.68] - [sd: 0.66] - [norm. obs: 67] #>  given: #>      [bio1] > [27.31] (value: 27.39) #>      [bio15] <= [102.79] (value: 102.48) #>      [bio12] <= [993.00] (value: 845.00) #>  #>  #> row [1346] - suspicious column: [bio5] - suspicious value: [32.96] #>  distribution: 95.714% >= 36.01 - [mean: 37.68] - [sd: 0.66] - [norm. obs: 67] #>  given: #>      [bio1] > [27.31] (value: 27.41) #>      [bio15] <= [102.79] (value: 102.34) #>      [bio12] <= [993.00] (value: 855.00) #>  #>  #> row [1728] - suspicious column: [bio5] - suspicious value: [33.42] #>  distribution: 95.714% >= 36.01 - [mean: 37.68] - [sd: 0.66] - [norm. obs: 67] #>  given: #>      [bio1] > [27.31] (value: 27.44) #>      [bio15] <= [102.79] (value: 66.08) #>      [bio12] <= [993.00] (value: 958.00) #>  #>  #> row [821] - suspicious column: [bio5] - suspicious value: [31.90] #>  distribution: 98.333% >= 34.51 - [mean: 36.25] - [sd: 0.84] - [norm. obs: 59] #>  given: #>      [bio1] between (24.12, 25.70] (value: 24.70) #>      [bio15] > [113.08] (value: 128.18) #>      [bio12] <= [996.00] (value: 658.00)  # Check result # You could also plot samples overlap with a raster # plot(occ_outliers, #      overlay_raster = variables %>% slice('band', 6)) plot(occ_outliers) # Remove outliers if necessary occ_outliers <- suspicious_env_outliers(   po_df, variables = variables,   rm_outliers = T,   z_outlier = 5,   outliers_print = 0L,   visualize = FALSE) po_sf <- occ_outliers$pts_occ  # Make occurrences set.seed(11) occ_sf <- po_sf %>% sample_frac(0.7) occ_test_sf <- po_sf %>% filter(! id %in% occ_sf$id) occ_sf <- occ_sf %>% select(-id) %>%    mutate(observation = 1) occ_test_sf <- occ_test_sf %>% select(-id) %>%    mutate(observation = 1)  # Have a look at the samples if you like # ggplot() + #   geom_raster(data = as.data.frame(my.species$suitab.raster, xy = T), #               aes(x, y, fill = layer)) + #   scale_fill_viridis_c('Suitability', na.value = 'transparent') + #   geom_sf(data = occ_sf, aes(color = 'Train'), size = 0.8) + #   geom_sf(data = occ_test_sf, aes(color = 'Test'), size = 0.8) + #   scale_color_manual('', values = c('Train' = 'red', 'Test' = 'blue')) + #   theme_classic()  # Recheck the variable correlation dim_reduce(variables, threshold = 1.0, samples = occ_sf) #> Dimension reduction #> Correlation threshold: 1 #> Original variables: bio1, bio5, bio12, bio15 #> Variables after dimension reduction: bio1, bio5, bio12, bio15 #> ================================================================================ #> Reduced correlations: #>        bio1  bio5 bio12 bio15 #> bio1   1.00  0.69  0.19 -0.22 #> bio5   0.69  1.00 -0.03  0.20 #> bio12  0.19 -0.03  1.00 -0.37 #> bio15 -0.22  0.20 -0.37  1.00"},{"path":"/articles/introduction_of_itsdm.html","id":"build-a-simple-isolation_forest-species-distribution-model","dir":"Articles","previous_headings":"","what":"Build a simple isolation_forest species distribution model","title":"Introduction of itsdm with a virtual species","text":"build SDM using extended isolation forest (ndim = 2) sample rate 0.8. Let’s compare predicted suitability real suitability.   Let’s model evaluation using multiple presence-metrics. package, implement presence-presence-background evaluation metrics. model calculated evaluation training test datasets. just display evaluation test dataset. check it_sdm$eval_train way it_sdm$eval_test.  result isotree_po options generate response curves variable analysis together. response curves include marginal response curves, independent response curves, Shapley value-based dependence. variable analysis consists Jackknife Pearson correlation result full model variables AUC_ratio variable dependence SHAP test.     According analysis, explanatory variables contribute significantly model. predictable virtual species made four variables. bio12 important variable. Besides regular response curves, itsdm also makes spatially partial dependence maps. default isotree_po, Shapley value-based spatial dependence maps generated computational efficiency. user generate maps calling function spatial_response later getting model done. Note large raster stack environmental variables might cause memory failure super slow computation calculating Shapely value-based spatially dependence maps. use based knowledge data. Shapley value-based dependence map give bit information value pushing prediction higher lower average.  Marginal independent effects indicate difference comparing variable . Shapley value based effect additionally show relative contribution one variable comparing variables. example, SHAP-based effect bio1 shows bio1 contribute much model areas even though decisive variable. direct result function isotree_po environmental suitability. use function convert_to_pa convert suitability presence-absence based different methods: threshold, logistic, linear conversion, /desirable species prevalence.","code":"# Do modeling it_sdm <- isotree_po(obs = occ_sf,                      obs_ind_eval = occ_test_sf,                      variables = variables,                      sample_size = 0.8,                      ndim = 2) # Metrics based on test dataset it_sdm$eval_test #> =================================== #> Presence-only evaluation: #> CVI with 0.25 threshold:      0.640 #> CVI with 0.5 threshold:       0.809 #> CVI with 0.75 threshold:      0.704 #> CBI:                          0.986 #> AUC (ratio)                   0.942 #> =================================== #> Presence-background evaluation: #> Sensitivity:                  0.972 #> Specificity:                  0.856 #> TSS:                          0.828 #> AUC:                          0.946 #> Similarity indices: #> Jaccard's similarity index:   0.849 #> Sørensen's similarity index:  0.919 #> Overprediction rate:          0.129 #> Underprediction rate:         0.028 plot(it_sdm$eval_test) # Plot response curves ## Marginal response curves of bio5 and bio6 plot(it_sdm$marginal_responses, target_var = c('bio1', 'bio5')) ## Independent response curves of variable bio1 and bio12. plot(it_sdm$independent_responses, target_var = c('bio1', 'bio12')) ## Variable dependence scatter points with fitted curves made by SHAP test plot(it_sdm$shap_dependence, smooth_line = FALSE) # Printing variable analysis could give you enough info of variable importance it_sdm$variable_analysis #> Relative variable importance #> =================================== #> Methods: Jackknife test and SHAP #> Numer of variables: 4 #> =================================== #> Jackknife test #> Based on Pearson correlation (Max value is 1) #> [Training dataset]: #> bio12 With only: //////////////////////////////////////// 0.885 #>       Without  : ////////////////////////////////////////// 0.937 #> bio15 With only: //////////////////////////////// 0.71 #>       Without  : //////////////////////////////////////////// 0.974 #> bio5  With only: /////////////////////////////// 0.692 #>       Without  : //////////////////////////////////////////// 0.983 #> bio1  With only: //////////////////////// 0.543 #>       Without  : //////////////////////////////////////////// 0.983 #> [Test dataset]: #> bio12 With only: /////////////////////////////////////// 0.878 #>       Without  : ////////////////////////////////////////// 0.934 #> bio5  With only: //////////////////////////////// 0.705 #>       Without  : //////////////////////////////////////////// 0.983 #> bio15 With only: //////////////////////////////// 0.703 #>       Without  : //////////////////////////////////////////// 0.976 #> bio1  With only: //////////////////////// 0.536 #>       Without  : //////////////////////////////////////////// 0.983 #> ====================================================================== #> Jackknife test #> Based on AUC ratio (Max value of traing and test are 0.946 and 0.942) #> [Training dataset]: #> bio12 With only: //////////////////////////////////////// 0.898 #>       Without  : ///////////////////////////////////////// 0.921 #> bio5  With only: ///////////////////////////////////// 0.82 #>       Without  : ////////////////////////////////////////// 0.941 #> bio15 With only: //////////////////////////////////// 0.801 #>       Without  : ////////////////////////////////////////// 0.94 #> bio1  With only: ////////////////////////////////// 0.761 #>       Without  : ////////////////////////////////////////// 0.943 #> [Test dataset]: #> bio12 With only: //////////////////////////////////////// 0.878 #>       Without  : ///////////////////////////////////////// 0.919 #> bio5  With only: //////////////////////////////////// 0.791 #>       Without  : ////////////////////////////////////////// 0.936 #> bio15 With only: /////////////////////////////////// 0.773 #>       Without  : ////////////////////////////////////////// 0.936 #> bio1  With only: ///////////////////////////////// 0.735 #>       Without  : ////////////////////////////////////////// 0.938 #> ====================================================================== #> SHAP (mean(|Shapley value|)) #> [Training dataset]: #> bio12 : ############################################ 0.054 #> bio15 : ######################### 0.031 #> bio5  : ######################### 0.03 #> bio1  : ##################### 0.026 #> [Test dataset]: #> bio12 : ############################################# 0.055 #> bio5  : ########################## 0.032 #> bio15 : ######################### 0.031 #> bio1  : ##################### 0.026  # We also could plot variable importance out plot(it_sdm$variable_analysis) # Generate spatially partial dependence maps including Shapley value-based one ## Larger shap_nsim value could make smoother map but takes longer time as a ## trade-off spatial_responses_all <- spatial_response(   model = it_sdm$model,   var_occ = it_sdm$vars_train,   variables = it_sdm$variables,   shap_nsim = 20)  # Plot spatial response maps plot(spatial_responses_all, target_var = c('bio1', 'bio12')) # An example of converting to presence-absence map ## Use logistic conversion with alpha = -0.05, beta = 0.5 ## and not set species prevalence pa_map <- convert_to_pa(it_sdm$prediction,                         method = \"logistic\",                         beta = 0.7, # the same with virtual species                         alpha = -.05,                         visualize = FALSE) pa_map; plot(pa_map) #> Logistic conversion #> beta = 0.7 #> alpha = -0.05 #> species prevalence = 0.105503625307627"},{"path":"/articles/introduction_of_itsdm.html","id":"analyze-variable-dependence","dir":"Articles","previous_headings":"","what":"Analyze variable dependence","title":"Introduction of itsdm with a virtual species","text":"always helpful understand dependence among variables. result function shap_dependence it_sdm$shap_dependence can used analyze variable dependence .  figure shows bio1 bio5 strong correlations.","code":"var_dependence <- shap_dependence(   it_sdm$model, it_sdm$vars_train,   variables = it_sdm$variables)  # Multiple ways to plot variable VariableDependence object ## Plot without smooth fit curve plot(var_dependence,      target_var = c('bio1', 'bio12'),      related_var = 'bio5', smooth_line = TRUE)"},{"path":"/articles/introduction_of_itsdm.html","id":"analyze-variable-contribution","dir":"Articles","previous_headings":"","what":"Analyze variable contribution","title":"Introduction of itsdm with a virtual species","text":"Sometimes, interested observations, instance, outliers. variable_contrib function allows analyze contribution variable. relies Shapley values.  example, .2 observation decided largely bio15 bio5 negatively. Let’s check spatial response map together.","code":"## Analyze variable contribution for interested observations. ## For example, outliers. var_contrib <- variable_contrib(   it_sdm$model,   it_sdm$vars_train,   it_sdm$vars_test %>% slice(1:6))  # Plot contribution separately for each observation ## By default, it only plot the most 5 important variables for each observation ## You could change `num_features` to show more variables plot(var_contrib, plot_each_obs = T, num_features = 4) ggplot() +   geom_stars(data = spatial_responses_all$spatial_shap_dependence$bio15) +   scale_fill_distiller('SHAP-based effect', palette = \"RdYlBu\",                        na.value = \"transparent\") +   geom_sf(data = occ_test_sf %>% slice(2),           color = 'blue', pch = 1) +   theme_linedraw()"},{"path":"/articles/itsdm_example.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Using itsdm to a real species: Africa savanna elephant","text":"Install missing packages","code":"install.packages(\"rnaturalearth\") install.packages(\"rgbif\") install.packages(\"lubridate\") options(repos = c(   ropensci = 'https://ropensci.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) install.packages('scrubr') library(itsdm, quietly = T) library(ggplot2, quietly = T) library(dplyr, quietly = T) select <- dplyr::select"},{"path":"/articles/itsdm_example.html","id":"prepare-environmental-variables","dir":"Articles","previous_headings":"","what":"Prepare environmental variables","title":"Using itsdm to a real species: Africa savanna elephant","text":"objective vignette provide example use categorical variables itsdm show reasonable workflow SDM, create optimal model. building formal good model, try something start. use variables listed create primary model. Bioclimatic variables Protected area land cover type categorical variables. Note maps protected area land cover types prepared provided package. use system.file file names find like following.","code":"library(stars) library(rnaturalearth, quietly = T)  # Bioclimatic variables data(\"mainland_africa\") bios <- worldclim2(var = 'bio',                    bry = mainland_africa,                    path = tempdir(),                    nm_mark = 'africa') %>% st_normalize()  # Protected area fname <- 'extdata/wdpa_africa_10min.tif' wdpa <- system.file(fname, package = 'itsdm') %>%   read_stars() %>% setNames('wdpa')  # Land cover fname <- 'extdata/landcover_africa_10min.tif' landcover <- system.file(fname, package = 'itsdm') %>%   read_stars() %>% setNames('landcover')  # Merge them together as variable stack variables <- c(bios,                c(wdpa, landcover) %>% merge(name = \"band\"),                along = 3) %>% split(\"band\") variables <- variables %>%   mutate(wdpa = factor(wdpa),          landcover = factor(landcover)) rm(fname, bios, wdpa, landcover)"},{"path":"/articles/itsdm_example.html","id":"prepare-occurrence-from-gbif","dir":"Articles","previous_headings":"","what":"Prepare occurrence from GBIF","title":"Using itsdm to a real species: Africa savanna elephant","text":"official name African savanna elephant Loxodonta africana (Blumenbach, 1797), used search GBIF. According following reasons: reasonable use past data. distribution elephants relatively stable short time. choose recent occurrence observations (2010 now) assumption landcover changes ignorable 2010 now. Even though occurrence dataset obtained GBIF high quality API provides available options screening. still disturbances contained occurrence. complement, extra steps clean occurrence data. steps include: Basic Geo-cleaning. example, clean records impossible incomplete coordinates. clean duplicated records. step using package scrubr. Range-cleaning. Strict records specific area, extra step Geo-cleaning. Spatial deduction. step remove duplicates spatial resolution raster. Environmental cleaning. Detect /drop records outlier environmental values. step dimension reduction environmental variable outlier.tree compares records general condition.  According figure prior knowledge Africa savanna elephant, decide drop outliers. outliers seem like rare records. addition, real outliers, later isolation.forest detect . Now let’s organize occurrence next step.","code":"library(lubridate, quietly = T) library(rgbif, quietly = T)  ## Set the time interval for querying on GBIF start_year <- 2010 year <- sprintf('%s,%s',  start_year, year(Sys.Date()))  # Search nm_search <- \"Loxodonta africana (Blumenbach, 1797)\" occ <- occ_search(scientificName = nm_search,                   hasCoordinate = TRUE,                   limit = 200000,                   year = year,                   hasGeospatialIssue = FALSE) library(scrubr, quietly = T)  # Step1: Basic Geo-cleaning on occurrence occ_clean <- occ$data %>%   select(name, decimalLongitude,          decimalLatitude, eventDate, key) %>%   setNames(c('name', 'longitude',              'latitude', 'date', 'key')) %>%   mutate(date = as.Date(date)) %>%   dframe() %>%   coord_impossible() %>%   coord_incomplete() %>%   coord_unlikely()  # Step2: Range-cleaning on occurrence ## For example, Africa savanna elephant only could appear in Africa data(\"mainland_africa\") occ_clean_sf <- occ_clean %>%   st_as_sf(coords = c('longitude', 'latitude'),            crs = 4326) occ_clean_sf <- st_intersection(mainland_africa, occ_clean_sf)  # Step3: Spatial deduction occ_clean_sf <- st_rasterize(   occ_clean_sf,   template = variables %>% select('bio1') %>%     mutate(bio1 = NA)) %>%   st_xy2sfc(as_points = T) %>% st_as_sf() %>%   select(geometry) # Step4: Environmental-cleaning on occurrence ## We used a very high z_outliers ## It is tricky to remove environmental outliers ## because it is hard to tell if they are outliers or ## just rare records. occ_outliers <- suspicious_env_outliers(   occ_clean_sf,   variables = variables,   z_outlier = 16,   outliers_print = 4L,   visualize = FALSE) #> Reporting top 4 outliers [out of 26 found] #>  #> row [128] - suspicious column: [bio14] - suspicious value: [1.00] #>  distribution: 98.734% <= 0.00 - [mean: 0.00] - [sd: 0.00] - [norm. obs: 78] #>  given: #>      [bio11] > [25.71] (value: 26.22) #>  #>  #> row [288] - suspicious column: [bio14] - suspicious value: [2.00] #>  distribution: 97.701% <= 0.00 - [mean: 0.00] - [sd: 0.00] - [norm. obs: 340] #>  given: #>      [bio17] <= [8.00] (value: 8.00) #>      [bio18] <= [162.00] (value: 156.00) #>  #>  #> row [1] - suspicious column: [bio17] - suspicious value: [1.00] #>  distribution: 92.857% <= 0.00 - [mean: 0.00] - [sd: 0.00] - [norm. obs: 26] #>  given: #>      [bio14] <= [1.00] (value: 0.00) #>      [bio5] > [39.79] (value: 41.24) #>  #>  #> row [36] - suspicious column: [bio17] - suspicious value: [1.00] #>  distribution: 92.857% <= 0.00 - [mean: 0.00] - [sd: 0.00] - [norm. obs: 26] #>  given: #>      [bio14] <= [1.00] (value: 0.00) #>      [bio5] > [39.79] (value: 40.49) plot(occ_outliers) occ <- occ_outliers$pts_occ rm(occ_clean_sf)"},{"path":"/articles/itsdm_example.html","id":"understand-the-correlations-between-variables","dir":"Articles","previous_headings":"","what":"Understand the correlations between variables","title":"Using itsdm to a real species: Africa savanna elephant","text":"Function dim_reduce package allows user reduce dimensions arbitrarily numeric environmental variables based correlation. Thus, thing numeric ones variables keep categorical ones. highly recommended merge attributes variables band dimension categorical layers unless know pretty well . merging force categorical values change numeric ones, know tricky convert factors numbers R. far, variables environmental variable stack numeric ones low correlation categorical ones.","code":"# Split continuous and categorical variables # and reduce dimensions for continuous ones cat_vars <- c('wdpa', 'landcover') var_cat <- variables %>% select(all_of(cat_vars)) var_con <- variables %>% select(-all_of(cat_vars)) var_con_rdc <- dim_reduce(var_con, threshold = 0.75, samples = occ) var_con_rdc #> Dimension reduction #> Correlation threshold: 0.75 #> Original variables: bio1, bio2, bio3, bio4, bio5, bio6, bio7, bio8, bio9, #> bio10, bio11, bio12, bio13, bio14, bio15, bio16, bio17, bio18, bio19 #> Variables after dimension reduction: bio1, bio2, bio3, bio6, bio12, bio14, #> bio18, bio19 #> ================================================================================ #> Reduced correlations: #>        bio1  bio2  bio3  bio6 bio12 bio14 bio18 bio19 #> bio1   1.00  0.03 -0.22  0.64  0.04 -0.40 -0.41  0.27 #> bio2   0.03  1.00 -0.44 -0.66 -0.56 -0.47 -0.34 -0.30 #> bio3  -0.22 -0.44  1.00  0.43  0.34  0.44  0.22  0.23 #> bio6   0.64 -0.66  0.43  1.00  0.45  0.11 -0.10  0.48 #> bio12  0.04 -0.56  0.34  0.45  1.00  0.59  0.49  0.54 #> bio14 -0.40 -0.47  0.44  0.11  0.59  1.00  0.43  0.30 #> bio18 -0.41 -0.34  0.22 -0.10  0.49  0.43  1.00 -0.07 #> bio19  0.27 -0.30  0.23  0.48  0.54  0.30 -0.07  1.00  # Put together var_con <- var_con_rdc$img_reduced variables <- do.call(c, list(split(var_con, 'band'), var_cat)) rm(cat_vars, var_cat, var_con, var_con_rdc) # If you really want to merge ## At least could ensure the values are the original values var_merge <- variables var_merge <- var_merge %>%   mutate(wdpa = as.integer(levels(wdpa))[wdpa],          landcover = as.integer(levels(landcover))[landcover]) var_merge <- merge(var_merge, name = 'band') rm(var_merge)"},{"path":"/articles/itsdm_example.html","id":"split-occurrence-to-training-and-test","dir":"Articles","previous_headings":"","what":"Split occurrence to training and test","title":"Using itsdm to a real species: Africa savanna elephant","text":"Now occurrence environmental variables ready use modeling.","code":"# Make occurrences occ <- occ %>% mutate(id = 1:nrow(.)) set.seed(11) occ_sf <- occ %>% sample_frac(0.7) occ_test_sf <- occ %>% filter(! id %in% occ_sf$id) occ_sf <- occ_sf %>% select(-id) %>%    mutate(observation = 1) occ_test_sf <- occ_test_sf %>% select(-id) %>%    mutate(observation = 1) rm(occ)"},{"path":"/articles/itsdm_example.html","id":"build-a-isolation_forest-species-distribution-model","dir":"Articles","previous_headings":"","what":"Build a isolation_forest species distribution model","title":"Using itsdm to a real species: Africa savanna elephant","text":"step, users use strategies like grid search preferred evaluation metrics find optimal arguments model. example, use set arguments: ntrees = 200 sample_rate = 0.9 ndim = 4 includes 2 categorical variables categ_cols = c('wdpa', 'landcover')","code":"# Do modeling it_sdm <- isotree_po(obs = occ_sf,                      obs_ind_eval = occ_test_sf,                      variables = variables,                      categ_vars = c('wdpa', 'landcover'),                      ntrees = 200L,                      sample_size = 0.9,                      ndim = 4,                      seed = 10L)"},{"path":"/articles/itsdm_example.html","id":"visualize-results","dir":"Articles","previous_headings":"","what":"Visualize results","title":"Using itsdm to a real species: Africa savanna elephant","text":"Predicted environmental suitability  indicates African savanna elephants large potential habitat continent. Like explicit field research indicates potential range African elephants five times larger current extent (https://scitechdaily.com/african-elephants--plenty--habitat--spared---ivory-trade/). mega-mammal, elephants adapt survive harsh environments. Presence-model evaluation  According evaluation, model potential improve, instance, adding explanatory features: forest cover, distance water, elevation, slope, human influence, etc. According continuous Boyce index TSS curve, model overestimates “completely” unsuitable areas, example, Sahara (see suitability map). One assumption several occurrence data locate Namib desert. land cover map reflects information Sahara. Namib desert narrow close natural resources, makes suitable elephants. However, deep Sahara story. , including feature describing distance water helpful improve model.","code":"# According to training dataset # it_sdm$eval_train # plot(it_sdm$eval_train)  # According to test dataset it_sdm$eval_test #> =================================== #> Presence-only evaluation: #> CVI with 0.25 threshold:      0.006 #> CVI with 0.5 threshold:       0.144 #> CVI with 0.75 threshold:      0.590 #> CBI:                          0.393 #> AUC (ratio)                   0.880 #> =================================== #> Presence-background evaluation: #> Sensitivity:                  0.818 #> Specificity:                  0.774 #> TSS:                          0.591 #> AUC:                          0.870 #> Similarity indices: #> Jaccard's similarity index:   0.667 #> Sørensen's similarity index:  0.800 #> Overprediction rate:          0.217 #> Underprediction rate:         0.182 plot(it_sdm$eval_test)"},{"path":"/articles/itsdm_example.html","id":"response-curves","dir":"Articles","previous_headings":"","what":"Response curves","title":"Using itsdm to a real species: Africa savanna elephant","text":"Response curves environmental variables show suitability variable species changes value varied. Marginal response curves  checked marginal response curves two bioclimatic variables. response curve bio1 bio12 reasonable indicate preferred temperature precipitation conditions. Independent response curves  According figure , elephants go beyond protected areas often. matches previous study related elephant movement. Thus, binary protected area good modeling variable. Distance protected area might , however. usually, plenty natural resources (food, water, etc.) within protected area. Elephants might like stay around protected areas. response land cover indicates elephants strongly prefer stay landscape, forest, shrub, wetland, cropland, built-. useful information: Forest/shrub cover ratio may another helpful feature regarding land cover. Distance human residential (e.g., village) may helpful. Shapley value based dependence curves  Now, let’s overview variable responses made Shapley values. variables seem environmental features elephants. Precipitation seems like solid decisive factor. analyze feature importance diagnose contribution variable.","code":"# Plot response curves plot(it_sdm$marginal_responses, target_var = c('bio1', 'bio12')) plot(it_sdm$independent_responses, target_var = c('landcover', 'wdpa')) ## Variable dependence scatter points with fitted curves made by SHAP test plot(it_sdm$shap_dependences, smooth_line = FALSE)"},{"path":"/articles/itsdm_example.html","id":"variable-importance","dir":"Articles","previous_headings":"","what":"Variable importance","title":"Using itsdm to a real species: Africa savanna elephant","text":"Variable importance analysis another way understand relationship environmental variables species distribution. also help improve model performance. text , annual precipitation important decisive factor. precipitation decides supply food water. Temperature critical constraint elephants. indicates compared food/water, elephants tolerate extreme temperature. Bio14 (Precipitation Driest Month) -important variable agreed Jackknife test SHAP test. One assumption animals must deal limited precipitation driest month, common African savanna. Jackknife test, landcover relatively high contribution working alone. model performs well without . wdpa. Shapley value-based test, two variables judged less important. indicates landcover wdpa strongly correlate variables. Changing way use might necessary improve model performance. Shapley value summary plot another way interpret variable contribution.","code":"it_sdm$variable_analysis #> Relative variable importance #> =================================== #> Methods: Jackknife test and SHAP #> Numer of variables: 10 #> =================================== #> Jackknife test #> Based on Pearson correlation (Max value is 1) #> [Training dataset]: #> bio12     With only: ////////////////////////////////// 0.757 #>           Without  : //////////////////////////////////////////// 0.972 #> bio18     With only: //////////////////////////// 0.631 #>           Without  : //////////////////////////////////////////// 0.978 #> landcover With only: //////////////////////////// 0.62 #>           Without  : //////////////////////////////////////////// 0.986 #> bio3      With only: /////////////////////////// 0.605 #>           Without  : //////////////////////////////////////////// 0.975 #> bio19     With only: //////////////////////// 0.523 #>           Without  : /////////////////////////////////////////// 0.96 #> bio6      With only: /////////////////////// 0.52 #>           Without  : //////////////////////////////////////////// 0.982 #> wdpa      With only: ///////////////////// 0.461 #>           Without  : //////////////////////////////////////////// 0.985 #> bio1      With only: //////////////////// 0.447 #>           Without  : //////////////////////////////////////////// 0.977 #> bio14     With only: ///////////////// 0.368 #>           Without  : //////////////////////////////////////////// 0.98 #> bio2      With only: /////////////// 0.341 #>           Without  : //////////////////////////////////////////// 0.982 #> [Test dataset]: #> bio12     With only: //////////////////////////////////// 0.799 #>           Without  : //////////////////////////////////////////// 0.97 #> bio3      With only: /////////////////////////// 0.59 #>           Without  : //////////////////////////////////////////// 0.975 #> landcover With only: ////////////////////////// 0.586 #>           Without  : //////////////////////////////////////////// 0.987 #> bio18     With only: ////////////////////////// 0.578 #>           Without  : //////////////////////////////////////////// 0.98 #> bio19     With only: ///////////////////////// 0.56 #>           Without  : /////////////////////////////////////////// 0.954 #> bio6      With only: ///////////////////// 0.462 #>           Without  : //////////////////////////////////////////// 0.984 #> wdpa      With only: //////////////////// 0.452 #>           Without  : //////////////////////////////////////////// 0.985 #> bio1      With only: ////////////////// 0.411 #>           Without  : //////////////////////////////////////////// 0.976 #> bio14     With only: //////////////// 0.345 #>           Without  : //////////////////////////////////////////// 0.983 #> bio2      With only: //////////// 0.27 #>           Without  : //////////////////////////////////////////// 0.984 #> ====================================================================== #> Jackknife test #> Based on AUC ratio (Max value of traing and test are 0.870 and 0.880) #> [Training dataset]: #> bio12     With only: ////////////////////////////////////// 0.842 #>           Without  : ////////////////////////////////////// 0.839 #> bio18     With only: //////////////////////////////////// 0.792 #>           Without  : /////////////////////////////////////// 0.87 #> bio3      With only: ////////////////////////////////// 0.76 #>           Without  : /////////////////////////////////////// 0.875 #> bio6      With only: //////////////////////////////// 0.719 #>           Without  : /////////////////////////////////////// 0.871 #> bio1      With only: /////////////////////////////// 0.696 #>           Without  : /////////////////////////////////////// 0.862 #> landcover With only: /////////////////////////////// 0.681 #>           Without  : /////////////////////////////////////// 0.876 #> wdpa      With only: ////////////////////////////// 0.673 #>           Without  : /////////////////////////////////////// 0.86 #> bio2      With only: ///////////////////////////// 0.65 #>           Without  : /////////////////////////////////////// 0.869 #> bio19     With only: //////////////////////// 0.535 #>           Without  : /////////////////////////////////////// 0.873 #> bio14     With only: ////////////// 0.308 #>           Without  : //////////////////////////////////////// 0.881 #> [Test dataset]: #> bio12     With only: ///////////////////////////////////// 0.833 #>           Without  : ////////////////////////////////////// 0.849 #> bio18     With only: /////////////////////////////////// 0.777 #>           Without  : //////////////////////////////////////// 0.878 #> bio3      With only: ///////////////////////////////// 0.744 #>           Without  : //////////////////////////////////////// 0.887 #> landcover With only: /////////////////////////////// 0.691 #>           Without  : //////////////////////////////////////// 0.885 #> wdpa      With only: ////////////////////////////// 0.677 #>           Without  : /////////////////////////////////////// 0.87 #> bio1      With only: ////////////////////////////// 0.672 #>           Without  : /////////////////////////////////////// 0.875 #> bio6      With only: ////////////////////////////// 0.67 #>           Without  : //////////////////////////////////////// 0.878 #> bio2      With only: //////////////////////////// 0.612 #>           Without  : /////////////////////////////////////// 0.876 #> bio19     With only: /////////////////////// 0.51 #>           Without  : //////////////////////////////////////// 0.888 #> bio14     With only: ////////////// 0.311 #>           Without  : //////////////////////////////////////// 0.888 #> ====================================================================== #> SHAP (mean(|Shapley value|)) #> [Training dataset]: #> bio12     : ########################################### 0.015 #> bio19     : ################################## 0.012 #> bio3      : ############################### 0.011 #> bio18     : ############################ 0.01 #> bio1      : ######################### 0.009 #> wdpa      : ##################### 0.008 #> bio14     : #################### 0.007 #> bio6      : ################## 0.007 #> bio2      : ################# 0.006 #> landcover : ################# 0.006 #> [Test dataset]: #> bio12     : ############################################# 0.016 #> bio19     : ####################################### 0.014 #> bio3      : ############################## 0.011 #> bio18     : ########################## 0.009 #> bio1      : ######################## 0.008 #> wdpa      : ##################### 0.008 #> bio14     : ################### 0.007 #> bio6      : ################# 0.006 #> landcover : ################# 0.006 #> bio2      : ############### 0.005 var_contrib <- variable_contrib(   it_sdm$model,   it_sdm$vars_train,   it_sdm$vars_train) # Plot general contribution for all observations plot(var_contrib)"},{"path":"/articles/itsdm_example.html","id":"presence-absence-map","dir":"Articles","previous_headings":"","what":"Presence-absence map","title":"Using itsdm to a real species: Africa savanna elephant","text":"Use function convert_to_pa convert suitability probability occurrence.","code":"# Convert to presence-absence map pa_map <- convert_to_pa(it_sdm$prediction,                         method = \"logistic\",                         beta = 0.2,                         species_prevalence = 0.2,                         threshold = 0.5,                         visualize = FALSE) ggplot() +   geom_stars(data = pa_map$probability_of_occurrence) +   scale_fill_viridis_c('Probability of occurrence',                        na.value = 'transparent') +   coord_equal() +   theme_linedraw()"},{"path":"/articles/itsdm_example.html","id":"analyze-variable-dependence","dir":"Articles","previous_headings":"","what":"Analyze variable dependence","title":"Using itsdm to a real species: Africa savanna elephant","text":"Randomly check variable dependence .  Bio3 strong correlation bio12. check variable dependence one one exclude final model.","code":"plot(it_sdm$shap_dependences,      target_var = c('bio1', 'bio12', 'landcover'),      related_var = 'bio3', smooth_line = FALSE)"},{"path":"/articles/itsdm_example.html","id":"analyze-variable-contribution","dir":"Articles","previous_headings":"","what":"Analyze variable contribution","title":"Using itsdm to a real species: Africa savanna elephant","text":"Sometimes, interested observations, instance, outliers detected beginning steps. According figure , can tell suspicious outliers environmental outliers.  According feature response curves figure, detected outliers removed training. example, features strongly negative contribution observations .2, .4, .6 excluded.","code":"## Analyze variable contribution for interested observations. ## For example, the first 10 outliers detected. var_analysis <- it_sdm$vars_train %>%   slice(occ_outliers$outliers %>%           arrange(-outlier_score) %>%           slice(1:10) %>%           pull(suspious_row)) var_contrib_outliers <- variable_contrib(   it_sdm$model,   it_sdm$vars_train,   var_analysis)  # Plot contribution separately for each observation ## By default, it only plot the most 5 important variables for each observation ## You could change `num_features` to show more variables plot(var_contrib_outliers, plot_each_obs = T)"},{"path":"/articles/itsdm_example.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using itsdm to a real species: Africa savanna elephant","text":"primary analysis, found obvious things improve model performance: Add explanatory features, vegetation, distance water, elevation, slope, human influence (e.g., distance human residential, population density, distance roads), etc. Since precipitation important others determine elephants go. Add bioclimatic variables related rainfall. Change way using land cover categorical map protected area binary map. Use ratio distance instead. Delete outliers occurrence dataset. Probably tune one two parameters isotree_po. distribution elephants well studied, model translate information machine language. good model can explain clearly concisely tell knowledge taught. interested user try .","code":""},{"path":"/articles/shap_application.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Applications of Shapley values on SDM explanation","text":"itsdm, Shapley values-based functions can used internal model iForest external models fitted outside itsdm. functions can analyze spatial non-spatial variable responses, contributions environmental variables observations predictions, potential areas affected changing variables. vignette, show external model can used functions example Random forest (RF) model Baobab trees Madagascar.","code":""},{"path":"/articles/shap_application.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Applications of Shapley values on SDM explanation","text":"","code":"# Load libraries library(itsdm) library(dplyr) library(stars) library(virtualspecies) library(dismo) library(randomForest) library(ggplot2) library(ggpubr) library(rnaturalearth) library(rgbif) library(lubridate) select <- dplyr::select"},{"path":"/articles/shap_application.html","id":"baobab-trees-of-madagascar","dir":"Articles","previous_headings":"","what":"Baobab trees of Madagascar","title":"Applications of Shapley values on SDM explanation","text":"","code":"# Set study area, Madagascar study_area <- ne_countries(   scale = 10,   continent = 'africa', returnclass = 'sf') %>%   filter(admin == 'Madagascar') %>%   select()  # Get training data ## Search via GBIF occ <- occ_search(   scientificName = \"Adansonia za Baill.\",   hasCoordinate = TRUE,   limit = 200000,   hasGeospatialIssue = FALSE) %>%   `[[`(\"data\") %>%   select(decimalLongitude, decimalLatitude)  ## Clean the occurrences spatially occ <- occ %>%   st_as_sf(coords = c('decimalLongitude', 'decimalLatitude'),            crs = 4326) occ <- st_intersection(study_area, occ)"},{"path":"/articles/shap_application.html","id":"environmmental-variables","dir":"Articles","previous_headings":"","what":"Environmmental variables","title":"Applications of Shapley values on SDM explanation","text":"","code":"# Get environmental variables for current and future bios_current <- worldclim2(   var = 'bio', res = 2.5,   bry = study_area,   path = tempdir(),   nm_mark = 'africa') %>%   st_normalize()  # Remove highly correlated variables bios_current <- dim_reduce(   bios_current,   threshold = 0.7,   preferred_vars = c(paste0(\"bio\", c(1:3, 13)))) bios_current <- bios_current$img_reduced  # Query the future variables bios_future <- future_worldclim2(   var = 'bioc', res = 2.5,   bry = study_area,   interval = \"2041-2060\",   path = tempdir(),   nm_mark = 'sa') %>%   st_set_dimensions(\"band\", values = paste0(\"bio\", 1:19)) %>%   dplyr::slice(\"band\", st_get_dimension_values(bios_current, \"band\")) %>%    st_normalize()"},{"path":"/articles/shap_application.html","id":"make-training-samples","dir":"Articles","previous_headings":"","what":"Make training samples","title":"Applications of Shapley values on SDM explanation","text":"","code":"## Spatial deduction template <- bios_current %>%   dplyr::slice(\"band\", 1) %>%   mutate(reduced_image = NA) occ <- st_rasterize(   occ, template) %>%   st_xy2sfc(as_points = T) %>% st_as_sf() %>%   select(geometry) rm(template)  ## Extract environmental values training <- st_extract(   bios_current %>% split(\"band\"), occ) %>%   st_drop_geometry() %>%   mutate(occ = 1)  ## Get background values set.seed(124) background <- randomPoints(   as(bios_current %>% dplyr::slice(\"band\", 1), \"Raster\"), 1000) background <- st_extract(bios_current, background) %>%   as.data.frame() %>% na.omit() %>%   mutate(occ = 0) names(background) <- c(st_get_dimension_values(bios_current, \"band\"), \"occ\")  # Put them together training <- rbind(training, background) %>%   na.omit() %>%   select(c(\"occ\", st_get_dimension_values(bios_current, \"band\")))"},{"path":"/articles/shap_application.html","id":"fit-the-model","dir":"Articles","previous_headings":"","what":"Fit the model","title":"Applications of Shapley values on SDM explanation","text":"","code":"# Convert independent to factor for RF. training$occ <- as.factor(training$occ)  # Calculate class frequency prNum <- as.numeric(table(training$occ)[\"1\"]) # number of presences bgNum <- as.numeric(table(training$occ)[\"0\"]) # number of backgrounds samsize <- c(\"0\" = prNum, \"1\" = prNum)          # Fit the down-sampling RF set.seed(123) mod_rf <- randomForest(   occ ~ .,   data = training,   ntree = 1000,   sampsize = samsize,   replace = TRUE)"},{"path":"/articles/shap_application.html","id":"make-the-predictions-under-current-and-future-environment","dir":"Articles","previous_headings":"","what":"Make the predictions under current and future environment","title":"Applications of Shapley values on SDM explanation","text":"","code":"# Reformat the variables bios_current <- bios_current %>% split(\"band\") bios_future <- bios_future %>% split(\"band\")  # Suitability under current and future conditions suit_current <- predict(bios_current, mod_rf, type = \"prob\")[\"1\"] suit_future <- predict(bios_future, mod_rf, type = \"prob\")[\"1\"]  # Plot them preds <- c(suit_current, suit_future) names(preds) <- c(\"Current\", \"Future\")  ggplot() +   geom_stars(data = preds %>% merge(name = \"band\"),              na.action = na.omit) +   scale_fill_viridis_c(\"Suitability\") +   facet_wrap(~band) +   coord_equal() +   theme_void() +   theme(strip.text.x = element_text(size = 12))"},{"path":[]},{"path":"/articles/shap_application.html","id":"preciction-wrapper-function","dir":"Articles","previous_headings":"Environmental response curves","what":"Preciction wrapper function","title":"Applications of Shapley values on SDM explanation","text":"probably important argument set order get proper result. example Random Forest SDM used vignette: see, wrapper function least two arguments: model object newdata. function body make proper prediction newdata. instance, set type = \"prob\" let RF make probabilities subset result make give us probabilities presence.","code":"## Define the wrapper function for RF ## This is extremely important to get right results pfun <- function(X.model, newdata) {   # for data.frame   predict(X.model, newdata, type = \"prob\")[, \"1\"] } # Make the response curves respones <- shap_dependence(   model = mod_rf,   var_occ = training[, 2:ncol(training)],   variables = bios_current,   pfun = pfun)  # Check bio13, Precipitation of Wettest Month, for example plot(respones, target_var = \"bio13\") # Check relationship between bio13 and bio2 for example # These plots can be extended as they are ggplot2 plot, like this: plot(respones, target_var = \"bio13\",       related_var = \"bio2\", smooth_line = FALSE) +   theme_bw() +   theme(text = element_text(size = 16))"},{"path":"/articles/shap_application.html","id":"environmental-response-maps","dir":"Articles","previous_headings":"","what":"Environmental response maps","title":"Applications of Shapley values on SDM explanation","text":"","code":"rsp_maps <- shap_spatial_response(   model = mod_rf,   var_occ = training[, 2:ncol(training)],   variables = bios_current,   pfun = pfun)  # Check the response map of bio13, for example plot(rsp_maps, target_var = \"bio13\")"},{"path":"/articles/shap_application.html","id":"analyze-environmetnal-contribution-of-observations","dir":"Articles","previous_headings":"","what":"Analyze environmetnal contribution of observations","title":"Applications of Shapley values on SDM explanation","text":"","code":"# Take some observations for example set.seed(124) occ_to_check <- randomPoints(   as(bios_current %>% select(\"bio1\"), \"Raster\"), 4) vars_to_check <- st_extract(bios_current, occ_to_check) %>%   as.data.frame()  # Do the calculation var_ctris <- variable_contrib(   model = mod_rf,   var_occ = training[, 2:ncol(training)],   var_occ_analysis = vars_to_check,   pfun = pfun)  # Check it ## Spatial locations ggplot() +   geom_sf(data = study_area, fill = \"transparent\", color = \"black\",           linewidth = 0.8) +   geom_sf(data = st_as_sf(data.frame(occ_to_check),                            coords = c(\"x\", \"y\"), crs = 4326),           color = \"blue\") + theme_void() # The contributions of variables to each observation plot(var_ctris, plot_each_obs = TRUE, num_features = 6)"},{"path":"/articles/shap_application.html","id":"affects-of-changing-environment","dir":"Articles","previous_headings":"","what":"Affects of changing environment","title":"Applications of Shapley values on SDM explanation","text":"","code":"bio13_changes <- detect_envi_change(   model = mod_rf,   var_occ = training[, 2:ncol(training)],   variables = bios_current,   target_var = \"bio13\",   variables_future = bios_future,   pfun = pfun)  # Check the result plot(bio13_changes)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lei Song. Author, maintainer. Lyndon Estes. Thesis advisor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Song L (2025). itsdm: Isolation Forest-Based Presence-Species Distribution Modeling. R package version 0.2.2, https://github.com/LLeiSong/itsdm.","code":"@Manual{,   title = {itsdm: Isolation Forest-Based Presence-Only Species Distribution Modeling},   author = {Lei Song},   year = {2025},   note = {R package version 0.2.2},   url = {https://github.com/LLeiSong/itsdm}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Isolation Forest-Based Presence-Only Species Distribution Modeling","text":"itsdm calls isolation forest variations SCiForest EIF model species distribution. provides features including: functions download environmental variables. Outlier tree-based suspicious environmental outliers detection. Isolation forest-based environmental suitability modeling. Non-spatial response curves environmental variables. Spatial response maps environmental variables. Variable importance analysis. Presence-model evaluation. Method convert predicted suitability presence-absence map. Variable contribution analysis target observations. Method analyze spatial impacts changing environment.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Isolation Forest-Based Presence-Only Species Distribution Modeling","text":"Install CRAN release itsdm can install development version itsdm GitHub :","code":"install.packages(\"itsdm\") # install.packages(\"remotes\") remotes::install_github(\"LLeiSong/itsdm\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Isolation Forest-Based Presence-Only Species Distribution Modeling","text":"basic example shows solve common problem: Shapley values-based analysis can apply external models. example analyze impacts bio12 decreasing 200 mm species distribution based Random Forest (RF) prediction:","code":"library(itsdm) library(dplyr) library(stars) library(ggplot2)  # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_absence\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = obs_type)  # Get environmental variables env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 6, 12, 15))  # Train the model mod <- isotree_po(   obs_mode = \"presence_absence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 200,   sample_size = 0.8, ndim = 2,   seed = 123L)  # Check results ## Suitability ggplot() +   geom_stars(data = mod$prediction) +   scale_fill_viridis_c('Predicted suitability',                        na.value = 'transparent') +   coord_equal() +   theme_linedraw()  ## Plot independent response curves plot(mod$independent_responses,       target_var = c('bio1', 'bio12')) # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>%   filter(usage == \"train\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12)) %>%   split()  model_data <- stars::st_extract(   env_vars, at = as.matrix(obs_df %>% select(x, y))) %>%   as.data.frame() names(model_data) <- names(env_vars) model_data <- model_data %>%   mutate(occ = obs_df[['observation']]) model_data$occ <- as.factor(model_data$occ)  mod_rf <- randomForest(   occ ~ .,   data = model_data,   ntree = 200)  pfun <- function(X.model, newdata) {   # for data.frame   predict(X.model, newdata, type = \"prob\")[, \"1\"] }  # Use a fixed value climate_changes <- detect_envi_change(   model = mod_rf,   var_occ = model_data %>% select(-occ),   variables = env_vars,   target_var = \"bio12\",   bins = 20,   var_future = -200,   pfun = pfun)"},{"path":"/index.html","id":"contributor","dir":"","previous_headings":"","what":"Contributor","title":"Isolation Forest-Based Presence-Only Species Distribution Modeling","text":"David Cortes, helps improve flexibility calling isotree. welcome helps! Please make pull request reach lei.song@rutgers.edu want make contribution.","code":""},{"path":"/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Isolation Forest-Based Presence-Only Species Distribution Modeling","text":"package part project “Combining Spatially-explicit Simulation Animal Movement Earth Observation Reconcile Agriculture Wildlife Conservation”. project funded NASA FINESST program (award number: 80NSSC20K1640).","code":""},{"path":"/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Isolation Forest-Based Presence-Only Species Distribution Modeling","text":"Song, L., & Estes, L. (2023). itsdm: Isolation forest-based presence-species distribution modelling explanation r. Methods Ecology Evolution, 14(3), 831-840. https://doi.org/10.1111/2041-210X.14067 Song, L., Frazier, . E., Estes, . B., & Estes, L. D. (2025). multi-scale approach integrating species distribution models landscape connectivity identify critical linkage zones African savanna elephants (Loxodonta africana). Ecological Modelling, 507, 111198. https://doi.org/10.1016/j.ecolmodel.2025.111198","code":""},{"path":"/reference/cmcc_bioclim.html","id":null,"dir":"Reference","previous_headings":"","what":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"Parse historic CMCC-BioClimInd bioclimatic indicators optionally setting boundary options.","code":""},{"path":"/reference/cmcc_bioclim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"","code":"cmcc_bioclim(bry = NULL, path = NULL, nm_mark = \"clip\", return_stack = TRUE)"},{"path":"/reference/cmcc_bioclim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"bry (sf) boundary mask downloaded original data. NULL, get global map. NULL, can take sf, sfc, etc. default NULL. path (character) path save downloaded imagery. NULL, use current working directory. default NULL. nm_mark (character) name mark clipped images. default \"clip\". ignored bry NULL. return_stack (logical) TRUE, stack imagery together return. area large resolution high, better stack . default TRUE.","code":""},{"path":"/reference/cmcc_bioclim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"return_stack TRUE, images returned stars. Otherwise, nothing return, user receive message images .","code":""},{"path":"/reference/cmcc_bioclim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"Web page page dataset","code":""},{"path":"/reference/cmcc_bioclim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"function experimental moment, download server dataset stable Worldclim yet. fails due slow internet, try set larger timeout option, e.g., using options(timeout = 1e3).","code":""},{"path":"/reference/cmcc_bioclim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"Noce, Sergio, Luca Caporaso, Monia Santini.\"new global dataset bioclimatic indicators. \"Scientific data 7.1 (2020): 1-12. doi:10.1038/s41597-020-00726-5","code":""},{"path":"/reference/cmcc_bioclim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download historic Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — cmcc_bioclim","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr) library(sf) library(itsdm) bry <- st_polygon(   list(rbind(c(29.34, -11.72), c(29.34, -0.95),              c(40.31, -0.95), c(40.31, -11.72),              c(29.34, -11.72)))) %>%   st_sfc(crs = 4326)  cmcc_bios <- cmcc_bioclim(bry = bry,   nm_mark = 'tza', path = tempdir()) } # }"},{"path":"/reference/convert_to_pa.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert predicted suitability to presence-absence map. — convert_to_pa","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"Use threshold-based, logistic linear conversion method convert predicted suitability map presence-absence map.","code":""},{"path":"/reference/convert_to_pa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"","code":"convert_to_pa(   suitability,   method = \"logistic\",   beta = 0.5,   alpha = -0.05,   a = 1,   b = 0,   species_prevalence = NA,   threshold = 0.5,   seed = 10L,   visualize = TRUE )"},{"path":"/reference/convert_to_pa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"suitability (stars RasterLayer) suitability raster. method (character) conversion method, must one 'threshold', 'logistic', 'linear'. default 'logistic'. beta (numeric) Works 'threshold' 'logistic' method. method threshold, beta threshold value cutoff. method logistic, sigmoid midpoint. default 0.5. alpha (numeric) Works logistic method. logistic growth rate steepness curve. default -.05. (numeric) Works linear method. slope line. default 1. b (numeric) Works linear method. intercept line. default 0. species_prevalence (numeric NA) Works three methods. species prevalence classify suitability map. NA, calculated automatically based arguments. default NA. threshold (numeric) threshold used convert probability occurrence presence-absence map. ranges [0, 1]. default 0.5. seed (integer) seed random progress. default 10L visualize (logical) TRUE, plot map suitability, probability occurrence, presence-absence together. default TRUE.","code":""},{"path":"/reference/convert_to_pa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"(PAConversion) list suitability (stars) input suitability map probability_of_occurrence (stars) map occurrence probability pa_conversion (list) list conversion arguments pa_map (stars) presence-absence map","code":""},{"path":"/reference/convert_to_pa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"Multiple methods arguments used combination conversion.","code":""},{"path":"/reference/convert_to_pa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"c onvertToPA package virtualspecies","code":""},{"path":[]},{"path":"/reference/convert_to_pa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert predicted suitability to presence-absence map. — convert_to_pa","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 5,   sample_size = 0.8, ndim = 1L,   nthreads = 1,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Threshold conversion pa_thred <- convert_to_pa(mod$prediction,                           method = 'threshold', beta = 0.5, visualize = FALSE) pa_thred plot(pa_thred)  if (FALSE) { # \\dontrun{ # Logistic conversion pa_log <- convert_to_pa(mod$prediction, method = 'logistic',                         beta = 0.5, alpha = -.05)  # Linear conversion pa_lin <- convert_to_pa(mod$prediction, method = 'linear',                         a = 1, b = 0) } # }"},{"path":"/reference/detect_envi_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect areas influenced by a changing environment variable. — detect_envi_change","title":"Detect areas influenced by a changing environment variable. — detect_envi_change","text":"Use shapley values detect potential areas impact species distribution. works continuous variables.","code":""},{"path":"/reference/detect_envi_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect areas influenced by a changing environment variable. — detect_envi_change","text":"","code":"detect_envi_change(   model,   var_occ,   variables,   target_var,   bins = NULL,   shap_nsim = 10,   seed = 10,   var_future = NULL,   variables_future = NULL,   pfun = .pfun_shap,   method = \"gam\",   formula = y ~ s(x) )"},{"path":"/reference/detect_envi_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect areas influenced by a changing environment variable. — detect_envi_change","text":"model (isolation_forest model). item model POIsotree made function isotree_po. also user-fitted models long pfun can work . var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. also use item variables POIsotree made function isotree_po. target_var (character) selected variable process. bins (integer) bin cut target variable analysis. NULL, cut apply. default NULL. shap_nsim (integer) number Monte Carlo repetitions SHAP method use estimating Shapley value. See details documentation function explain package fastshap. number variables large, smaller shap_nsim used. cautious making SHAP-based spatial dependence slow Monte-Carlo computation pixels. worth time much informative. See details documentation function explain. package fastshap. default 10. Usually value 10 - 20 enough. seed (integer) seed random progress. default 10L. var_future (numeric stars) number apply current variable stars layer future variable. can NULL variables_future set. variables_future (stars) stars raster stack future variables. NULL var_future set. pfun (function) predict function requires two arguments, object newdata. required model isolation_forest. default wrapper function designed iForest model itsdm. method Argument passed geom_smooth fit line. Note arguments used target variables. User set variable one one set arguments separately. Default value \"gam\". formula Argument passed geom_smooth fit line. Note arguments used target variables. User set variable one one set arguments separately. default y ~ s(x).","code":""},{"path":"/reference/detect_envi_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect areas influenced by a changing environment variable. — detect_envi_change","text":"(EnviChange) list figure fitted variable curve map variable contribiution change Tipping points variable contribution stars variable contribution current future condition, detected changes","code":""},{"path":"/reference/detect_envi_change.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect areas influenced by a changing environment variable. — detect_envi_change","text":"values show changes environmental variable affects modeling prediction space. maps help answer questions affected changing variable.","code":""},{"path":[]},{"path":"/reference/detect_envi_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect areas influenced by a changing environment variable. — detect_envi_change","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm) #' # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" #' # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\") #' env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 12)) #' # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 5,   sample_size = 0.8, ndim = 1L,   nthreads = 1,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Use a fixed value bio1_changes <- detect_envi_change(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1,   target_var = \"bio1\",   var_future = 5)  if (FALSE) { # \\dontrun{ # Use a future layer ## Read the future Worldclim variables future_vars <- system.file(   'extdata/future_bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   split() %>% select(bioc1, bioc12) # Rename the bands names(future_vars) <- paste0(\"bio\", c(1, 12))  ## Just use the target future variable climate_changes <- detect_envi_change(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1,   target_var = \"bio1\",   var_future = future_vars %>% select(\"bio1\"))  ## Use the whole future variable tack bio12_changes <- detect_envi_change(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1,   target_var = \"bio12\",   variables_future = future_vars)  print(bio12_changes)  ##### Use Random Forest model as an external model ######## library(randomForest)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>%   filter(usage == \"train\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12)) %>%   split()  model_data <- stars::st_extract(   env_vars, at = as.matrix(obs_df %>% select(x, y))) %>%   as.data.frame() names(model_data) <- names(env_vars) model_data <- model_data %>%   mutate(occ = obs_df[['observation']]) model_data$occ <- as.factor(model_data$occ)  mod_rf <- randomForest(   occ ~ .,   data = model_data,   ntree = 200)  pfun <- function(X.model, newdata) {   # for data.frame   predict(X.model, newdata, type = \"prob\")[, \"1\"] }  # Use a fixed value bio5_changes <- detect_envi_change(   model = mod_rf,   var_occ = model_data %>% select(-occ),   variables = env_vars,   target_var = \"bio5\",   bins = 20,   var_future = 5,   pfun = pfun)  plot(bio5_changes) } # }"},{"path":"/reference/dim_reduce.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove environmental variables that have high correlation with others. — dim_reduce","title":"Remove environmental variables that have high correlation with others. — dim_reduce","text":"Select environmental variables pairwise Pearson correlation lower user-defined threshold. NOTE works numeric variables, work categorical variables.","code":""},{"path":"/reference/dim_reduce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove environmental variables that have high correlation with others. — dim_reduce","text":"","code":"dim_reduce(   img_stack = NULL,   threshold = 0.5,   preferred_vars = NULL,   samples = NULL )"},{"path":"/reference/dim_reduce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove environmental variables that have high correlation with others. — dim_reduce","text":"img_stack (stars RasterStack) image stack work . threshold (numeric) threshold number Pearson correlation indicates two variables strongly correlated. default 0.5. preferred_vars (vector character) preferred variables order dimension reduction. preferred variables move beginning reduction. make sure placed order. Furthermore, setting preferred_vars guarantee can survive. example, one preferred variable placed later strong correlation former preferred variable. samples (sf sp) samples reduce dimension. NULL, can take sf, sfc, SpatialPointsDataFrame, SpatialPoints, etc. NULL, whole raster stack used. default NULL.","code":""},{"path":"/reference/dim_reduce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove environmental variables that have high correlation with others. — dim_reduce","text":"(ReducedImageStack) list threshold (numeric) threshold set function inputs img_reduced (stars) image stack dimension reduction cors_original (data.frame) table Pearson correlations variables. cors_reduced (data.frame) table Pearson correlations variables dimension reduction.","code":""},{"path":"/reference/dim_reduce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove environmental variables that have high correlation with others. — dim_reduce","text":"","code":"# \\donttest{ library(sf) library(itsdm) library(stars) library(dplyr) env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() img_reduced <- dim_reduce(env_vars, threshold = 0.7,   preferred_vars = c('bio1', 'bio12')) # }"},{"path":"/reference/evaluate_po.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the model based on presence-only data. — evaluate_po","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"function calculate two major types evaluation metrics terms presence-data. first type presence-customized metrics, Contrast Validation Index (CVI), continuous Boyce index (CBI), ROC_ratio. second type presence-background evaluation metrics extracting background points pseudo absence observations.","code":""},{"path":"/reference/evaluate_po.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"","code":"evaluate_po(   model,   occ_pred,   bg_pred = NULL,   var_pred,   threshold = NULL,   visualize = FALSE )"},{"path":"/reference/evaluate_po.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"model (isolation_forest) extended isolation forest SDM. item model POIsotree made function isotree_po. occ_pred (vector numeric) vector contains predicted values occurrence locations. bg_pred (vector numeric) vector contains predicted values number background points. var_pred (vector numeric) vector contains predicted values whole area. reason take vector keep function flexible multiple types output. threshold (numeric NULL) threshold calculate threshold-based evaluation metrics. NULL, recommended threshold calculated based optimal TSS value. default NULL. visualize (logical) TRUE, plot evaluation figures. default FALSE.","code":""},{"path":"/reference/evaluate_po.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"(POEvaluation) list po_evaluation presence-evaluation metrics. list cvi (list) list CVI 0.25, 0.5, 0.75 threshold boyce (list) list items related continuous Boyce index (CBI) roc_ratio (list) list ROC ratio AUC ratio pb_evaluation presence-background evaluation metrics. list confusion matrix (table) table confusion matrix. columns true values, rows predicted values. sensitivity (numeric) sensitivity TPR specificity (numeric) specificity TNR TSS (list) list info related true skill statistic (TSS) cutoff (vector numeric) vector cutoff threshold values tss (vector numeric) vector TSS cutoff threshold Recommended threshold (numeric) recommended threshold according TSS Optimal TSS (numeric) best TSS value roc (list) list ROC values AUC value Jaccard's similarity index (numeric) Jaccard's similarity index Sørensen's similarity index (numeric) Sørensen's similarity index F-measure Overprediction rate (numeric) Overprediction rate Underprediction rate (numeric) Underprediction rate","code":""},{"path":"/reference/evaluate_po.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"CVI proportion presence points falling cells threshold (0.5 example) habitat suitability index minus proportion cells within range threshold model. used varied thresholds: 0.25, 0.5, 0.75. continuous Boyce index (CBI) made 100 resolution moving windows Kendall method. ROC_ratio curve plots proportion presences falling range thresholds proportion cells falling range thresholds. area modified ROC curve called AUC_ratio. Sensitivity (TPR) = TP/(TP + FN) Specificity (TNR) = TN/(TN + FP) True skill statistic (TSS) = Sensitivity + specificity - 1 Jaccard's similarity index = TP/(FN + TP + FP) Sørensen's similarity index (F-measure) = 2TP/(FN + 2TP + FP) Overprediction rate = FP/(TP + FP) Underprediction rate = FN/(TP + FN)","code":""},{"path":"/reference/evaluate_po.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"Peterson, . Townsend, Monica Papeş, Jorge Soberón. \"Rethinking receiver operating characteristic analysis applications ecological niche modeling.\" Ecological modelling 213.1 (2008): 63-72. doi:10.1016/j.ecolmodel.2007.11.008 Hirzel, Alexandre H., et al. \"Evaluating ability habitat suitability models predict species presences.\" Ecological modelling 199.2 (2006): 142-152. doi:10.1016/j.ecolmodel.2006.05.017 Hirzel, Alexandre H., Raphaël Arlettaz. \"Modeling habitat suitability complex species distributions environmental-distance geometric mean.\" Environmental management 32.5 (2003): 614-623. doi:10.1007/s00267-003-0040-3 Leroy, Boris, et al. \"Without quality presence-absence data, discrimination metrics TSS can misleading measures model performance.\" Journal Biogeography 45.9 (2018): 1994-2002. doi:10.1111/jbi.13402","code":""},{"path":[]},{"path":"/reference/evaluate_po.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the model based on presence-only data. — evaluate_po","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With perfect_presence mode, # which should be very rare in reality. mod <- isotree_po(   obs_mode = \"perfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Without background samples or absences eval_train <- evaluate_po(   mod$model,   occ_pred = mod$pred_train$prediction,   var_pred = na.omit(as.vector(mod$prediction[[1]]))) print(eval_train)  # With background samples bg_pred <- st_extract(   mod$prediction, mod$background_samples) %>%   st_drop_geometry() eval_train <- evaluate_po(   mod$model,   occ_pred = mod$pred_train$prediction,   bg_pred = bg_pred$prediction,   var_pred = na.omit(as.vector(mod$prediction[[1]]))) plot(eval_train) #'"},{"path":"/reference/format_observation.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the occurrence dataset for usage in itsdm — format_observation","title":"Format the occurrence dataset for usage in itsdm — format_observation","text":"focus function format dataset keep dataset original possible. users can modify data want put function.","code":""},{"path":"/reference/format_observation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the occurrence dataset for usage in itsdm — format_observation","text":"","code":"format_observation(   obs_df,   eval_df = NULL,   split_perc = 0.3,   seed = 123,   obs_crs = 4326,   eval_crs = 4326,   x_col = \"x\",   y_col = \"y\",   obs_col = \"observation\",   obs_type = \"presence_only\" )"},{"path":"/reference/format_observation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the occurrence dataset for usage in itsdm — format_observation","text":"obs_df (data.frame). data.frame style table include x y coordinate observation training dataset. parameter required training dataset. Note: takes data.frame reduce risk column name mismatch data.frame formats tibble. eval_df (data.frame NULL) data.frame style table include x y coordinate observation evaluation dataset. Note: takes data.frame reduce risk column name mismatch data.frame formats tibble. split_perc (numeric) numeric 0 1 corresponding percentage data used evaluate models. required eval_df NULL. seed (integer) seed split train evaluation set. default value 123. required eval_df NULL. obs_crs (integer, numeric, character, crs) EPSG code, CRS string, sf::crs object coordinate system training dataset. corresponds x_col y_col obs_df. eval_crs (integer, numeric, character, crs) EPSG code, CRS string, sf::crs object coordinate system evaluation dataset. required  eval_df NULL. corresponds x_col y_col eval_df . x_col (character) name column x coordinate obs_df eval_df NULL. y_col (character) name column y coordinate obs_df eval_df NULL. obs_col (character) name column represents observations obs_df eval_df NULL. obs_type (character) type observation formatted . can one c(\"presence_only\", \"presence_absence\"). Note \"presence_only\" set, absences obs_df deleted. affect obs_df, eval_df keep original type matter independent one split eval_df.","code":""},{"path":"/reference/format_observation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format the occurrence dataset for usage in itsdm — format_observation","text":"(FormatOccurrence) list obs (sf) formatted pts observations. column observation \"observation\". obs_type (character) type observations, presence_only presence_absence. has_eval (logical) whether evaluation dataset set generated. eval (sf) formatted pts observations evaluation . column observation \"observation\". eval (eval_type)  type observations evaluation, presence_only presence_absence.","code":""},{"path":[]},{"path":"/reference/format_observation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format the occurrence dataset for usage in itsdm — format_observation","text":"","code":"library(dplyr) library(itsdm) data(\"occ_virtual_species\")  # obs + eval, presence-absence obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_absence\"  obs <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = obs_type)  # obs + eval, presence-only obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_only\"  obs <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = obs_type)  # obs + eval, different crs, presence-only obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") obs_crs <- 4326 # Fake one eval_crs <- 20935 x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_only\"  obs <- format_observation(   obs_df = obs_df, eval_df = eval_df,   obs_crs = obs_crs, eval_crs = eval_crs,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = obs_type)  # obs + split, presence-absence obs_df <- occ_virtual_species split_perc <- 0.5 seed <- 123 obs_crs <- 4326 x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_absence\"  obs <- format_observation(   obs_df = obs_df, split_perc = split_perc,   x_col = x_col, y_col = y_col,   obs_col = obs_col, obs_type = obs_type)  # obs, presence-only, no eval obs_df <- occ_virtual_species eval_df <- NULL split_perc <- 0 seed <- 123 obs_crs <- 4326 x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_only\"  obs <- format_observation(   obs_df = obs_df, eval_df = eval_df,   split_perc = split_perc,   x_col = x_col, y_col = y_col,   obs_col = obs_col, obs_type = obs_type)"},{"path":"/reference/future_cmcc_bioclim.html","id":null,"dir":"Reference","previous_headings":"","what":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"Parse future CMCC-BioClimInd bioclimatic indicators obtained different Earth System Models (ESMs) optionally setting boundary options.","code":""},{"path":"/reference/future_cmcc_bioclim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"","code":"future_cmcc_bioclim(   bry = NULL,   path = NULL,   esm = \"CMCC-CESM\",   rcp = 85,   interval = \"2040-2079\",   nm_mark = \"clip\",   return_stack = TRUE )"},{"path":"/reference/future_cmcc_bioclim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"bry (sf) boundary mask downloaded original data. NULL, get global map. NULL, can take sf, sfc, etc. default NULL. path (character) path save downloaded imagery. NULL, use current working directory. default NULL. esm (character) option Earth System Models (ESMs). one \"CMCC-CESM\", 'GFDL-ESM2M', 'HadGEM2-ES', 'IPSL-CM5A-LR', 'MIROC-ESM-CHEM', 'NorESM1-M'. default CMCC-CESM. rcp (numeric) option Representative Concentration Pathways (RCPs). 45 85. 85 available CMCC-CESM. default 85. interval (character) option time interval. one \"2040-2079\", \"2060-2099\". default \"2040-2079\". nm_mark (character) name mark clipped images. default \"clip\". ignored bry NULL. return_stack (logical) TRUE, stack imagery together return. area large resolution high, better stack . default TRUE.","code":""},{"path":"/reference/future_cmcc_bioclim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"return_stack TRUE, images returned stars. Otherwise, nothing return, user receive message images .","code":""},{"path":"/reference/future_cmcc_bioclim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"https://doi.pangaea.de/10.1594/PANGAEA.904278?format=html#download","code":""},{"path":"/reference/future_cmcc_bioclim.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"function experimental moment, download server dataset stable Worldclim yet. fails due slow internet, try set larger timeout option, e.g., using options(timeout = 1e3).","code":""},{"path":"/reference/future_cmcc_bioclim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"Noce, Sergio, Luca Caporaso, Monia Santini.\"new global dataset bioclimatic indicators. \"Scientific data 7.1 (2020): 1-12.doi:10.1038/s41597-020-00726-5","code":""},{"path":"/reference/future_cmcc_bioclim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download future Bioclimatic indicators (BIOs) named CMCC-BioClimInd. — future_cmcc_bioclim","text":"","code":"if (FALSE) { # \\dontrun{ library(itsdm) future_cmcc_bioclim(path = tempdir(),   esm = 'GFDL-ESM2M', rcp = 45,   interval = \"2040-2079\", return_stack = FALSE) } # }"},{"path":"/reference/future_worldclim2.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"function allows parse worldclim version 2.1 future climatic files setting boundary options.","code":""},{"path":"/reference/future_worldclim2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"","code":"future_worldclim2(   var = \"tmin\",   res = 10,   gcm = \"BCC-CSM2-MR\",   ssp = \"ssp585\",   interval = \"2021-2040\",   bry = NULL,   path = NULL,   nm_mark = \"clip\",   return_stack = TRUE )"},{"path":"/reference/future_worldclim2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"var (character) option variable download. one tmin, tmax, prec, bioc. default tmin. res (numeric) option resolution image download. one 0.5, 2.5, 5, 10. default 10. gcm (character) option global climate models. Check https://www.worldclim.org available GCM. ssp (character) option Shared Socio-economic Pathways. one \"ssp126\", \"ssp245\", \"ssp370\", \"ssp585\". default \"ssp585\". interval (character) option time interval. one \"2021-2040\", \"2041-2060\", \"2061-2080\", \"2081-2100\". default \"2021-2040\". bry (sf) boundary mask downloaded original data. NULL, get global map. NULL, can take sf, sfc, etc. default NULL. path (character) path save downloaded imagery. NULL, use current working directory. default NULL. nm_mark (character) name mark clipped images. default \"clip\". ignored bry NULL. return_stack (logical) TRUE, stack imagery together return. area large resolution high, better stack . default TRUE.","code":""},{"path":"/reference/future_worldclim2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"return_stack TRUE, images returned stars. Otherwise, nothing return, user receive message images .","code":""},{"path":"/reference/future_worldclim2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"Web page page dataset","code":""},{"path":"/reference/future_worldclim2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"fails due slow internet, try set larger timeout option, e.g., using options(timeout = 1e3).","code":""},{"path":"/reference/future_worldclim2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"Fick, Stephen E., Robert J. Hijmans. \"WorldClim 2: new 1-km spatial resolution climate surfaces global land areas.\" International journal climatology 37.12 (2017): 4302-4315.doi:10.1002/joc.5086","code":""},{"path":"/reference/future_worldclim2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to parse the future climate from worldclim version 2.1. — future_worldclim2","text":"","code":"if (FALSE) { # \\dontrun{ future_worldclim2(\"tmin\", 10, \"BCC-CSM2-MR\",   \"ssp585\", \"2021-2040\",   path = tempdir(), return_stack = FALSE) } # }"},{"path":"/reference/independent_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate independent responses of each variables. — independent_response","title":"Calculate independent responses of each variables. — independent_response","text":"Calculate independent responses variables within model.","code":""},{"path":"/reference/independent_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate independent responses of each variables. — independent_response","text":"","code":"independent_response(model, var_occ, variables, si = 1000, visualize = FALSE)"},{"path":"/reference/independent_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate independent responses of each variables. — independent_response","text":"model (predictive model). isolation_forest . item model POIsotree made function isotree_po. var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. also use item variables POIsotree made function isotree_po. si (integer) number samples generate response curves. small, response curves might biased. default value 1000. visualize (logical) TRUE, plot response curves. default FALSE.","code":""},{"path":"/reference/independent_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate independent responses of each variables. — independent_response","text":"(IndependentResponse) list responses_cont (list) list response values continuous variables responses_cat (list) list response values categorical variables","code":""},{"path":"/reference/independent_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate independent responses of each variables. — independent_response","text":"values show environmental variable independently affects modeling prediction. show predicted result using variable changes varied.","code":""},{"path":"/reference/independent_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate independent responses of each variables. — independent_response","text":"Elith, Jane, et al. \"evaluation strip: new robust method plotting predicted responses species distribution models.\" Ecological modelling 186.3 (2005): 280-289.doi:10.1016/j.ecolmodel.2004.12.007","code":""},{"path":[]},{"path":"/reference/independent_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate independent responses of each variables. — independent_response","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  independent_responses <- independent_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables) plot(independent_responses)"},{"path":"/reference/isotree_po.html","id":null,"dir":"Reference","previous_headings":"","what":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"Call Isolation forest variations species distribution modeling optionally call collection functions model explanation.","code":""},{"path":"/reference/isotree_po.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"","code":"isotree_po(   obs_mode = \"imperfect_presence\",   obs,   obs_ind_eval = NULL,   variables,   categ_vars = NULL,   contamination = 0.1,   ntrees = 100L,   sample_size = 1,   ndim = 1L,   seed = 10L,   ...,   offset = 0,   response = TRUE,   spatial_response = TRUE,   check_variable = TRUE,   visualize = FALSE )"},{"path":"/reference/isotree_po.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"obs_mode (string) mode observations training. one c(\"perfect_presence\", \"imperfect_presence\", \"presence_absence\"). \"perfect_presence\" means presence-occurrences without errors/uncertainties/bias, rare reality. \"Imperfect_presence\" means presence-occurrences errors/uncertainties/bias, common case. \"presence_absence\" means presence-absence observations regardless quality. See details learn set . default \"imperfect_presence\". obs (sf) sf observation training. recommended call function format_observation format occurrence (obs) passing . Otherwise, make sure column named \"observation\" observation. obs_ind_eval (sf NULL) Optional sf observations independent test. recommended call function format_observation format occurrence (obs) passing . Otherwise, make sure column named \"observation\" observation. NULL, independent test set used. default NULL. variables (RasterStack stars) stack environmental variables. categ_vars (vector character NULL) names categorical variables. Must names variables. contamination (numeric) percentage abnormal cases within dataset. iForest outlier detection algorithm. picks abnormal cases (much fewer) normal cases. argument used set many abnormal cases users power control. See details set . value less 0.5. constrain (0, 0.3]. default value 0.1. ntrees (integer) number trees isolation forest. must integer, use function .integer convert . default 100L. sample_size (numeric) rate sampling size [0, 1]. default 1.0. ndim (integer) ExtensionLevel isolation forest. must integer, use function .integer convert . Also, must smaller dimension environmental variables. 1, model traditional isolation forest, otherwise model extended isolation forest. default 1. seed (integer) random seed used modeling. integer. default 10L. ... arguments isolation.forest needs. offset (numeric) offset adjust fitted suitability. default zero. Highly recommend leave default. response (logical) TRUE, generate response curves. default TRUE. spatial_response (logical) TRUE, generate spatial response maps. default TRUE might slow. NOTE SHAP-based map generated slow. want mapped, call function spatial_response make . check_variable (logical) TRUE, check variable importance. default TRUE. visualize (logical) TRUE, generate essential figures related model. default FALSE.","code":""},{"path":"/reference/isotree_po.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"(POIsotree) list model (isolation.forest) threshold set function inputs variables (stars) formatted image stack environmental variables observation (sf) sf training occurrence dataset background_samples (sf) sf background points training dataset evaluation SHAP dependence plot independent_test (sf NULL) sf test occurrence dataset background_samples_test (sf NULL) sf background points test dataset evaluation SHAP dependence plot vars_train (data.frame) data.frame values environmental variables training occurrence pred_train (data.frame) data.frame values prediction training occurrence eval_train (POEvaluation) list presence-evaluation metrics based training dataset. See details POEvaluation evaluate_po var_test (data.frame NULL) data.frame values environmental variables test occurrence pred_test (data.frame NULL) data.frame values prediction test occurrence eval_test (POEvaluation NULL) list presence-evaluation metrics based test dataset. See details POEvaluation evaluate_po prediction (stars) predicted environmental suitability marginal_responses (MarginalResponse NULL) list marginal response values environmental variables. See details marginal_response offset (numeric) offset value set inputs. independent_responses (IndependentResponse NULL) list independent response values environmental variables. See details independent_response shap_dependences (ShapDependence NULL) list variable dependence values environmental variables. See details shap_dependence spatial_responses (SpatialResponse NULL) list spatial variable dependence values environmental variables. See details shap_dependence variable_analysis (VariableAnalysis NULL) list variable importance analysis based multiple metrics. See details variable_analysis","code":""},{"path":"/reference/isotree_po.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"\"perfect_presence\", user-defined number (contamination) samples taken background let iForest function normally. \"imperfect_presence\", actions required. obs_mode \"presence_absence\", contamination percent absences randomly selected work together presences train model. NOTE: obs_mode mode works obs. obs_ind_eval follow structure. Please read details algorithm isolation.forest https://github.com/david-cortes/isotree, R documentation function isolation.forest.","code":""},{"path":"/reference/isotree_po.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"Liu, Fei Tony, Kai Ming Ting, Zhi-Hua Zhou. \"Isolation forest.\" 2008 eighth ieee international conference data mining.IEEE, 2008. doi:10.1109/ICDM.2008.17 Liu, Fei Tony, Kai Ming Ting, Zhi-Hua Zhou. \"Isolation-based anomaly detection.\" ACM Transactions Knowledge Discovery Data (TKDD) 6.1 (2012): 1-39. doi:10.1145/2133360.2133363 Liu, Fei Tony, Kai Ming Ting, Zhi-Hua Zhou. \"detecting clustered anomalies using SCiForest.\" Joint European Conference Machine Learning Knowledge Discovery Databases. Springer, Berlin, Heidelberg, 2010. doi:10.1007/978-3-642-15883-4_18 Ha riri, Sahand, Matias Carrasco Kind, Robert J. Brunner. \"Extended isolation forest.\" IEEE Transactions Knowledge Data Engineering (2019). doi:10.1109/TKDE.2019.2947676 https://github.com/david-cortes/isotree References related feature response curves variable importance listed functions","code":""},{"path":[]},{"path":"/reference/isotree_po.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build Isolation forest species distribution model and explain the the model and outputs. — isotree_po","text":"","code":"# \\donttest{ ########### Presence-absence mode ################# library(dplyr) library(sf) library(stars) library(itsdm)  # Load example dataset data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_absence\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = obs_type)  # Load variables env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12))  # Modeling mod_virtual_species <- isotree_po(   obs_mode = \"presence_absence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.6, ndim = 1L,   seed = 123L, nthreads = 1)  # Check results ## Evaluation based on training dataset print(mod_virtual_species$eval_train) plot(mod_virtual_species$eval_train)  ## Response curves plot(mod_virtual_species$marginal_responses) plot(mod_virtual_species$independent_responses,      target_var = c('bio1', 'bio5')) plot(mod_virtual_species$shap_dependence)  ## Relationships between target var and related var plot(mod_virtual_species$shap_dependence,      target_var = c('bio1', 'bio5'),      related_var = 'bio12', smooth_span = 0)  # Variable importance mod_virtual_species$variable_analysis plot(mod_virtual_species$variable_analysis)  ########### Presence-absence mode ################## # Load example dataset data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  # Modeling with perfect_presence mode mod_perfect_pres <- isotree_po(   obs_mode = \"perfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.6, ndim = 1L,   seed = 123L, nthreads = 1)  # Modeling with imperfect_presence mode mod_imperfect_pres <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.6, ndim = 1L,   seed = 123L, nthreads = 1) # }"},{"path":"/reference/itsdm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolation forest-based presence-only species distribution modeling — itsdm-package","title":"Isolation forest-based presence-only species distribution modeling — itsdm-package","text":"package wrapper packages including isotree, outliertree, fastshap, etc. purely presence-species distribution modeling isolation forest variations SCiForest EIF. also provides functions make response curves, analyze variable importance, analyze variable dependence analyze variable contribution. utilities, package includes functions download bioclimatic variables including worldclim version 2.0 CMCC-BioClimInd. also functions detect outliers occurrence dataset data cleaning.","code":""},{"path":"/reference/itsdm-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Isolation forest-based presence-only species distribution modeling — itsdm-package","text":"package provides multiple features. Download bioclimatic variables reduce dimensions. includes historic future climatic indicators two sources: worldclim CMCC-BioClimInd Detect suspicous environmental outliers. Fit isolation forest-based SDM. Make presence-evaluation. Generate response curves environmental variables including marginal independent responses analyze interactions environmental variables. Analyze variable importance using Shapley values. Convert predicted environmental suitability presence-absence map. Analyze variable contributions specific observations.","code":""},{"path":"/reference/itsdm-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Isolation forest-based presence-only species distribution modeling — itsdm-package","text":"Please check references R documentation specific function.","code":""},{"path":"/reference/itsdm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Isolation forest-based presence-only species distribution modeling — itsdm-package","text":"Lei Song lsong@clarku.edu Maintainer: Lei Song lei.song@rutgers.edu","code":""},{"path":"/reference/mainland_africa.html","id":null,"dir":"Reference","previous_headings":"","what":"Boundary of mainland Africa — mainland_africa","title":"Boundary of mainland Africa — mainland_africa","text":"overall continental boundary mainland Africa queried rnaturalearth get processed.","code":""},{"path":"/reference/mainland_africa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boundary of mainland Africa — mainland_africa","text":"","code":"mainland_africa"},{"path":"/reference/mainland_africa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Boundary of mainland Africa — mainland_africa","text":"sf one rows 2 fields name (character) name polygon: Africa area (units) united number overall area km2. consensus area, just calculated area resolution. geometry (sfc) simple polygon feature boundary","code":""},{"path":"/reference/mainland_africa.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Boundary of mainland Africa — mainland_africa","text":"rnaturalearth","code":""},{"path":"/reference/marginal_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate marginal responses of each variables. — marginal_response","title":"Calculate marginal responses of each variables. — marginal_response","text":"Calculate marginal responses variables within model.","code":""},{"path":"/reference/marginal_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate marginal responses of each variables. — marginal_response","text":"","code":"marginal_response(model, var_occ, variables, si = 1000, visualize = FALSE)"},{"path":"/reference/marginal_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate marginal responses of each variables. — marginal_response","text":"model (predictive model). package, isolation_forest. item model POIsotree made function isotree_po. var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. also use item variables POIsotree made function isotree_po. si (integer) number samples generate response curves. small, response curves might biased. default value 1000. visualize (logical) TRUE, plot response curves. default FALSE.","code":""},{"path":"/reference/marginal_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate marginal responses of each variables. — marginal_response","text":"(MarginalResponse) nested list responses_cont (list) list response values continuous variables responses_cat (list) list response values categorical variables","code":""},{"path":"/reference/marginal_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate marginal responses of each variables. — marginal_response","text":"values show environmental variable affects modeling prediction. show predicted result changes environmental variable varied keeping environmental variables average sample value. might hard interpret strongly correlated variables. users use dim_reduce function remove strong correlation original environmental variable stack.","code":""},{"path":"/reference/marginal_response.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate marginal responses of each variables. — marginal_response","text":"Elith, Jane, et al. \"evaluation strip: new robust method plotting predicted responses species distribution models.\" Ecological modelling 186.3 (2005): 280-289.doi:10.1016/j.ecolmodel.2004.12.007","code":""},{"path":[]},{"path":"/reference/marginal_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate marginal responses of each variables. — marginal_response","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  marginal_responses <- marginal_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables) plot(marginal_responses) #'"},{"path":"/reference/occ_virtual_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Occurrence dataset of a virtual species — occ_virtual_species","title":"Occurrence dataset of a virtual species — occ_virtual_species","text":"pseudo presence-absence occurrence dataset virtual species made package virtualspecies.","code":""},{"path":"/reference/occ_virtual_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Occurrence dataset of a virtual species — occ_virtual_species","text":"","code":"occ_virtual_species"},{"path":"/reference/occ_virtual_species.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Occurrence dataset of a virtual species — occ_virtual_species","text":"data.frame 300 rows 2 fields x (numeric) x coordinates records WGS84 geographic coordinate system y (numeric) y coordinates records WGS84 geographic coordinate system observation (numeric) observations presence absence. usage (character) usage occurrences, either \"train\" training set, \"eval\" test set.","code":""},{"path":"/reference/occ_virtual_species.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Occurrence dataset of a virtual species — occ_virtual_species","text":"virtualspecies","code":""},{"path":"/reference/occ_virtual_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Occurrence dataset of a virtual species — occ_virtual_species","text":"environmental niche virtual species made defining response functions annual temperature annual precipitation mainland Africa. response function annual temperature normal distribution mean = 22 standard deviation = 5. response function annual precipitation normal distribution mean = 1000 standard deviation = 200. suitability convert presence-absence map logistic conversion beta = 0.7, alpha = -0.05, species prevalence = 0.27. Finally 500 presence-absence points sampled across whole region. points randomly split train (0.7) test set (0.3).","code":""},{"path":"/reference/plot.EnviChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the figure and map of the EnviChange object. — plot.EnviChange","title":"Display the figure and map of the EnviChange object. — plot.EnviChange","text":"Show response curve map contribution change detect_envi_change.","code":""},{"path":"/reference/plot.EnviChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the figure and map of the EnviChange object. — plot.EnviChange","text":"","code":"# S3 method for class 'EnviChange' plot(x, ...)"},{"path":"/reference/plot.EnviChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the figure and map of the EnviChange object. — plot.EnviChange","text":"x (EnviChange) EnviChange object messaged. return function detect_envi_change. ... used.","code":""},{"path":"/reference/plot.EnviChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the figure and map of the EnviChange object. — plot.EnviChange","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/plot.EnviChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the figure and map of the EnviChange object. — plot.EnviChange","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm) #' # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" #' # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\") #' env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12)) #' # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 1L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Use a fixed value bio1_changes <- detect_envi_change(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1,   target_var = \"bio1\",   var_future = 5)  plot(bio1_changes) # }"},{"path":"/reference/plot.EnvironmentalOutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Exhibit suspicious outliers in an observation dataset. — plot.EnvironmentalOutlier","title":"Exhibit suspicious outliers in an observation dataset. — plot.EnvironmentalOutlier","text":"Display observations potential outliers diagnosed function suspicious_env_outliers dataset.","code":""},{"path":"/reference/plot.EnvironmentalOutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exhibit suspicious outliers in an observation dataset. — plot.EnvironmentalOutlier","text":"","code":"# S3 method for class 'EnvironmentalOutlier' plot(x, overlay_raster = NULL, pts_alpha = 0.5, ...)"},{"path":"/reference/plot.EnvironmentalOutlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exhibit suspicious outliers in an observation dataset. — plot.EnvironmentalOutlier","text":"x (EnvironmentalOutlier) PAConversion object plot. return function suspicious_env_outliers. overlay_raster (RasterLayer stars) environmental raster plot together points. pts_alpha (numeric) alpha used geom_sf show points. ... used.","code":""},{"path":"/reference/plot.EnvironmentalOutlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exhibit suspicious outliers in an observation dataset. — plot.EnvironmentalOutlier","text":"ggplot2 figure outliers distribution among observations.","code":""},{"path":[]},{"path":"/reference/plot.EnvironmentalOutlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exhibit suspicious outliers in an observation dataset. — plot.EnvironmentalOutlier","text":"","code":"# \\donttest{ library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  occ_outliers <- suspicious_env_outliers(   occ = occ_virtual_species, variables = env_vars,   z_outlier = 3.5, outliers_print = 4L)  plot(occ_outliers) plot(occ_outliers,   overlay_raster = env_vars %>% slice('band', 1)) # }"},{"path":"/reference/plot.IndependentResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Show independent response curves. — plot.IndependentResponse","title":"Show independent response curves. — plot.IndependentResponse","text":"Plot independent response curves using ggplot2 optionally set target variable(s).","code":""},{"path":"/reference/plot.IndependentResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show independent response curves. — plot.IndependentResponse","text":"","code":"# S3 method for class 'IndependentResponse' plot(x, target_var = NA, smooth_span = 0.3, ...)"},{"path":"/reference/plot.IndependentResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show independent response curves. — plot.IndependentResponse","text":"x (IndependentResponse) independent response curve object plot. return function independent_response. target_var (vector character) target variable plot. NA. NA, variables plotted. smooth_span (numeric) span value smooth fit ggplot2. 0, smooth applied. default 0.3. ... used.","code":""},{"path":"/reference/plot.IndependentResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show independent response curves. — plot.IndependentResponse","text":"ggplot2 figure response curves","code":""},{"path":[]},{"path":"/reference/plot.IndependentResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show independent response curves. — plot.IndependentResponse","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  independent_responses <- independent_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables) plot(independent_responses) # }"},{"path":"/reference/plot.MarginalResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Show marginal response curves. — plot.MarginalResponse","title":"Show marginal response curves. — plot.MarginalResponse","text":"Plot marginal response curves using ggplot2 optionally set target variable(s).","code":""},{"path":"/reference/plot.MarginalResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show marginal response curves. — plot.MarginalResponse","text":"","code":"# S3 method for class 'MarginalResponse' plot(x, target_var = NA, smooth_span = 0.3, ...)"},{"path":"/reference/plot.MarginalResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show marginal response curves. — plot.MarginalResponse","text":"x (MarginalResponse) marginal response curve object plot. return function marginal_response. target_var (vector character) target variable plot. NA. NA, variables plotted. smooth_span (numeric) span value smooth fit ggplot2. 0, smooth applied. default 0.3. ... used.","code":""},{"path":"/reference/plot.MarginalResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show marginal response curves. — plot.MarginalResponse","text":"ggplot2 figure response curves","code":""},{"path":[]},{"path":"/reference/plot.MarginalResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show marginal response curves. — plot.MarginalResponse","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  marginal_responses <- marginal_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables) plot(marginal_responses, target_var = 'bio1') # }"},{"path":"/reference/plot.PAConversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Display results of conversion to presence-absence (PA). — plot.PAConversion","title":"Display results of conversion to presence-absence (PA). — plot.PAConversion","text":"Display raster suitability, probability occurrence, presence-absence binary map presence-absence (PA) conversion.","code":""},{"path":"/reference/plot.PAConversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display results of conversion to presence-absence (PA). — plot.PAConversion","text":"","code":"# S3 method for class 'PAConversion' plot(x, ...)"},{"path":"/reference/plot.PAConversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display results of conversion to presence-absence (PA). — plot.PAConversion","text":"x (PAConversion) PAConversion object plot. return function convert_to_pa. ... used.","code":""},{"path":"/reference/plot.PAConversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display results of conversion to presence-absence (PA). — plot.PAConversion","text":"patchwork ggplot2 figure suitability, probability occurrence, presence-absence binary map.","code":""},{"path":[]},{"path":"/reference/plot.PAConversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display results of conversion to presence-absence (PA). — plot.PAConversion","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Threshold conversion pa_thred <- convert_to_pa(mod$prediction,   method = 'threshold', beta = 0.5) plot(pa_thred) # }"},{"path":"/reference/plot.POEvaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Show model evaluation. — plot.POEvaluation","title":"Show model evaluation. — plot.POEvaluation","text":"Display informative detailed figures continuous Boyce index, AUC curves, TSS curve.","code":""},{"path":"/reference/plot.POEvaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show model evaluation. — plot.POEvaluation","text":"","code":"# S3 method for class 'POEvaluation' plot(x, ...)"},{"path":"/reference/plot.POEvaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show model evaluation. — plot.POEvaluation","text":"x (POEvaluation) presence-evaluation object plot. return function evaluate_po. ... used.","code":""},{"path":"/reference/plot.POEvaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show model evaluation. — plot.POEvaluation","text":"patchwork ggplot2 figure AUC_ratio, AUC_background CBI.","code":""},{"path":[]},{"path":"/reference/plot.POEvaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show model evaluation. — plot.POEvaluation","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  eval_train <- evaluate_po(   mod$model,   occ_pred = mod$pred_train$prediction,   var_pred = na.omit(as.vector(mod$prediction[[1]])))  plot(eval_train) # }"},{"path":"/reference/plot.SHAPSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Shapley values-based spatial variable dependence maps. — plot.SHAPSpatial","title":"Display Shapley values-based spatial variable dependence maps. — plot.SHAPSpatial","text":"Plot Shapley values-based spatial variable dependence maps using ggplot2 optionally setting target variable(s). works SHAPSpatial even though part SpatialResponse.","code":""},{"path":"/reference/plot.SHAPSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Shapley values-based spatial variable dependence maps. — plot.SHAPSpatial","text":"","code":"# S3 method for class 'SHAPSpatial' plot(x, target_var = NA, ...)"},{"path":"/reference/plot.SHAPSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display Shapley values-based spatial variable dependence maps. — plot.SHAPSpatial","text":"x (SHAPSpatial) spatial variable dependence object plot. return function shap_spatial_response. target_var (vector character) target variable plot. NA. NA, variables plotted. ... used.","code":""},{"path":"/reference/plot.SHAPSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display Shapley values-based spatial variable dependence maps. — plot.SHAPSpatial","text":"ggplot2 figure dependent maps","code":""},{"path":[]},{"path":"/reference/plot.SHAPSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display Shapley values-based spatial variable dependence maps. — plot.SHAPSpatial","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  shap_spatial <- shap_spatial_response(  model = mod$model,  target_vars = c(\"bio1\", \"bio12\"),  var_occ = mod$vars_train,  variables = mod$variables,  shap_nsim = 1)  plot(shap_spatial) plot(shap_spatial, target_var = \"bio1\") # }"},{"path":"/reference/plot.ShapDependence.html","id":null,"dir":"Reference","previous_headings":"","what":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","title":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","text":"Plot Shapley value-based variable dependence curves using ggplot2 optionally selecting target variable(s). also can plot interaction related variable selected variable(s).","code":""},{"path":"/reference/plot.ShapDependence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","text":"","code":"# S3 method for class 'ShapDependence' plot(   x,   target_var = NA,   related_var = NA,   sample_prop = 0.3,   sample_bin = 100,   smooth_line = TRUE,   seed = 123,   ... )"},{"path":"/reference/plot.ShapDependence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","text":"x (ShapDependence) variable dependence object plot. return function shap_dependence. target_var (vector character) target variable plot. NA. NA, variables plotted. related_var (character) dependent variable plot together target variables. NA. NA, related variable plotted. sample_prop (numeric) proportion points sample plotting. ignored number points less 1000. default 0.3. sample_bin (integer) number bins use stratified sampling. smooth_line (logical) Whether fit smooth line . ignored number points less 1000. default 100. seed (integer) seed sampling. ignored number points less 1000. default 123. ... arguments passed geom_smooth. Mainly method formula fit smooth line. Note arguments used target variables. User set variable one one set arguments separately.","code":""},{"path":"/reference/plot.ShapDependence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","text":"ggplot2 figure dependent curves","code":""},{"path":"/reference/plot.ShapDependence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","text":"number samples 1000, stratified sampling used thin sample pool, plot subset. user set proportion sample number bins stratified sampling.","code":""},{"path":[]},{"path":"/reference/plot.ShapDependence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show variable dependence plots and variable interaction plots obtained from Shapley values. — plot.ShapDependence","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_dependence <- shap_dependence(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables) plot(var_dependence, target_var = 'bio1', related_var = 'bio12') # }"},{"path":"/reference/plot.SpatialResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Display spatial variable dependence maps. — plot.SpatialResponse","title":"Display spatial variable dependence maps. — plot.SpatialResponse","text":"Plot spatial variable dependence maps using ggplot2 optionally setting target variable(s).","code":""},{"path":"/reference/plot.SpatialResponse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display spatial variable dependence maps. — plot.SpatialResponse","text":"","code":"# S3 method for class 'SpatialResponse' plot(x, target_var = NA, ...)"},{"path":"/reference/plot.SpatialResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display spatial variable dependence maps. — plot.SpatialResponse","text":"x (SpatialResponse) spatial variable dependence object plot. return function spatial_response. target_var (vector character) target variable plot. NA. NA, variables plotted. ... used.","code":""},{"path":"/reference/plot.SpatialResponse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display spatial variable dependence maps. — plot.SpatialResponse","text":"ggplot2 figure dependent maps","code":""},{"path":[]},{"path":"/reference/plot.SpatialResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display spatial variable dependence maps. — plot.SpatialResponse","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  spatial_responses <- spatial_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 10) plot(spatial_responses) plot(spatial_responses, target_var = 'bio1') # }"},{"path":"/reference/plot.VariableAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Display variable importance. — plot.VariableAnalysis","title":"Display variable importance. — plot.VariableAnalysis","text":"Display informative detailed figures variable importance.","code":""},{"path":"/reference/plot.VariableAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display variable importance. — plot.VariableAnalysis","text":"","code":"# S3 method for class 'VariableAnalysis' plot(x, ...)"},{"path":"/reference/plot.VariableAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display variable importance. — plot.VariableAnalysis","text":"x (VariableAnalysis) variable importance object plot. return function variable_analysis. ... used.","code":""},{"path":"/reference/plot.VariableAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display variable importance. — plot.VariableAnalysis","text":"patchwork ggplot2 figure variable importance according multiple metrics.","code":""},{"path":[]},{"path":"/reference/plot.VariableAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display variable importance. — plot.VariableAnalysis","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_analysis <- variable_analysis(   model = mod$model,   pts_occ = mod$observation,   pts_occ_test = mod$independent_test,   variables = mod$variables) plot(var_analysis) # }"},{"path":"/reference/plot.VariableContribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Exhibit variable contribution for target observations. — plot.VariableContribution","title":"Exhibit variable contribution for target observations. — plot.VariableContribution","text":"Use ggplot2 plot variable contribution target observation separately summarize overall variable contribution across selected observations.","code":""},{"path":"/reference/plot.VariableContribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exhibit variable contribution for target observations. — plot.VariableContribution","text":"","code":"# S3 method for class 'VariableContribution' plot(x, plot_each_obs = FALSE, num_features = 5, ...)"},{"path":"/reference/plot.VariableContribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exhibit variable contribution for target observations. — plot.VariableContribution","text":"x (VariableContribution) VariableContribution object plot. return function variable_contrib. plot_each_obs (logical) option plot type. TRUE, plot variable contribution every observation. Otherwise, plot variable contribution violin plot observations. num_features (integer) number important features plot. Just work plot_each_obs TRUE. ... used.","code":""},{"path":"/reference/plot.VariableContribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exhibit variable contribution for target observations. — plot.VariableContribution","text":"ggplot2 figure Variable Contribution.","code":""},{"path":[]},{"path":"/reference/plot.VariableContribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exhibit variable contribution for target observations. — plot.VariableContribution","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_contribution <- variable_contrib(   model = mod$model,   var_occ = mod$vars_train,   var_occ_analysis = mod$vars_train %>% slice(1:10))  # Plot variable contribution to each observation plot(var_contribution,      plot_each_obs = TRUE,      num_features = 3)  # Plot the summarized contribution plot(var_contribution) # }"},{"path":"/reference/print.EnviChange.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from EnviChange object. — print.EnviChange","title":"Print summary information from EnviChange object. — print.EnviChange","text":"Display detected tipping points percentage affected areas due changing variable function detect_envi_change.","code":""},{"path":"/reference/print.EnviChange.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from EnviChange object. — print.EnviChange","text":"","code":"# S3 method for class 'EnviChange' print(x, ...)"},{"path":"/reference/print.EnviChange.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from EnviChange object. — print.EnviChange","text":"x (EnviChange) EnviChange object messaged. return function detect_envi_change. ... used.","code":""},{"path":"/reference/print.EnviChange.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from EnviChange object. — print.EnviChange","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.EnviChange.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from EnviChange object. — print.EnviChange","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm) #' # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" #' # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\") #' env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12)) #' # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 1L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Use a fixed value bio1_changes <- detect_envi_change(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1,   target_var = \"bio1\",   var_future = 5)  print(bio1_changes) # }"},{"path":"/reference/print.EnvironmentalOutlier.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from EnvironmentalOutlier object. — print.EnvironmentalOutlier","title":"Print summary information from EnvironmentalOutlier object. — print.EnvironmentalOutlier","text":"Display environmental variable values comparing mean values detected environmental outliers observations.","code":""},{"path":"/reference/print.EnvironmentalOutlier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from EnvironmentalOutlier object. — print.EnvironmentalOutlier","text":"","code":"# S3 method for class 'EnvironmentalOutlier' print(x, ...)"},{"path":"/reference/print.EnvironmentalOutlier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from EnvironmentalOutlier object. — print.EnvironmentalOutlier","text":"x (EnvironmentalOutlier) EnvironmentalOutlier object messaged. return function suspicious_env_outliers. ... used.","code":""},{"path":"/reference/print.EnvironmentalOutlier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from EnvironmentalOutlier object. — print.EnvironmentalOutlier","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.EnvironmentalOutlier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from EnvironmentalOutlier object. — print.EnvironmentalOutlier","text":"","code":"# \\donttest{ library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  occ_outliers <- suspicious_env_outliers(   occ = occ_virtual_species, variables = env_vars,   z_outlier = 5, outliers_print = 4L)  print(occ_outliers) # }"},{"path":"/reference/print.FormatOccurrence.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from FormatOccurrence object. — print.FormatOccurrence","title":"Print summary information from FormatOccurrence object. — print.FormatOccurrence","text":"Display type number training evaluation dataset formatted observations obtained function format_observation.","code":""},{"path":"/reference/print.FormatOccurrence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from FormatOccurrence object. — print.FormatOccurrence","text":"","code":"# S3 method for class 'FormatOccurrence' print(x, ...)"},{"path":"/reference/print.FormatOccurrence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from FormatOccurrence object. — print.FormatOccurrence","text":"x (FormatOccurrence) FormatOccurrence object messaged. return function format_observation. ... used.","code":""},{"path":"/reference/print.FormatOccurrence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from FormatOccurrence object. — print.FormatOccurrence","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.FormatOccurrence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from FormatOccurrence object. — print.FormatOccurrence","text":"","code":"# \\donttest{ library(dplyr) library(itsdm) data(\"occ_virtual_species\")  # obs + eval, presence-absence obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\" obs_type <- \"presence_absence\"  obs_formatted <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = obs_type)  print(obs_formatted) # }"},{"path":"/reference/print.PAConversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from PAConversion object. — print.PAConversion","title":"Print summary information from PAConversion object. — print.PAConversion","text":"Display equation parameters PAConversion object.","code":""},{"path":"/reference/print.PAConversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from PAConversion object. — print.PAConversion","text":"","code":"# S3 method for class 'PAConversion' print(x, ...)"},{"path":"/reference/print.PAConversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from PAConversion object. — print.PAConversion","text":"x (PAConversion) PAConversion object messaged. return function convert_to_pa. ... used.","code":""},{"path":"/reference/print.PAConversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from PAConversion object. — print.PAConversion","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.PAConversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from PAConversion object. — print.PAConversion","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  # Threshold conversion pa_thred <- convert_to_pa(mod$prediction, method = 'threshold', beta = 0.5) print(pa_thred) # }"},{"path":"/reference/print.POEvaluation.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from model evaluation object (POEvaluation). — print.POEvaluation","title":"Print summary information from model evaluation object (POEvaluation). — print.POEvaluation","text":"Display general informative characteristics model evaluation object.","code":""},{"path":"/reference/print.POEvaluation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from model evaluation object (POEvaluation). — print.POEvaluation","text":"","code":"# S3 method for class 'POEvaluation' print(x, ...)"},{"path":"/reference/print.POEvaluation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from model evaluation object (POEvaluation). — print.POEvaluation","text":"x (POEvaluation) presence-evaluation object messaged. return function evaluate_po. ... used.","code":""},{"path":"/reference/print.POEvaluation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from model evaluation object (POEvaluation). — print.POEvaluation","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.POEvaluation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from model evaluation object (POEvaluation). — print.POEvaluation","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  eval_train <- evaluate_po(mod$model,   occ_pred = mod$pred_train$prediction,   var_pred = na.omit(as.vector(mod$prediction[[1]])))  print(eval_train) # }"},{"path":"/reference/print.POIsotree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from POIsotree object. — print.POIsotree","title":"Print summary information from POIsotree object. — print.POIsotree","text":"Display general informative characteristics fitted POIsotree object. includes model information, model evaluation, variable analysis, etc.","code":""},{"path":"/reference/print.POIsotree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from POIsotree object. — print.POIsotree","text":"","code":"# S3 method for class 'POIsotree' print(x, ...)"},{"path":"/reference/print.POIsotree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from POIsotree object. — print.POIsotree","text":"x (POIsotree) POIsotree object messaged. return function isotree_po. ... used.","code":""},{"path":"/reference/print.POIsotree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from POIsotree object. — print.POIsotree","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.POIsotree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from POIsotree object. — print.POIsotree","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE) print(mod) # }"},{"path":"/reference/print.ReducedImageStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from ReducedImageStack object. — print.ReducedImageStack","title":"Print summary information from ReducedImageStack object. — print.ReducedImageStack","text":"Display general informative characteristics ReducedImageStack object, including set threshold, original variables, selected variables correlations .","code":""},{"path":"/reference/print.ReducedImageStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from ReducedImageStack object. — print.ReducedImageStack","text":"","code":"# S3 method for class 'ReducedImageStack' print(x, ...)"},{"path":"/reference/print.ReducedImageStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from ReducedImageStack object. — print.ReducedImageStack","text":"x (ReducedImageStack) ReducedImageStack object messaged. return function dim_reduce. ... used.","code":""},{"path":"/reference/print.ReducedImageStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from ReducedImageStack object. — print.ReducedImageStack","text":"object passed input.","code":""},{"path":[]},{"path":"/reference/print.ReducedImageStack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from ReducedImageStack object. — print.ReducedImageStack","text":"","code":"# \\donttest{ library(itsdm) library(dplyr) library(stars) env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars()  img_reduced <- dim_reduce(env_vars, threshold = 0.7,   preferred_vars = c('bio1', 'bio12'))  print(img_reduced) # }"},{"path":"/reference/print.VariableAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","title":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","text":"Display non-visualized information VariableAnalysis object returned function variable_analysis.","code":""},{"path":"/reference/print.VariableAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","text":"","code":"# S3 method for class 'VariableAnalysis' print(x, ...)"},{"path":"/reference/print.VariableAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","text":"x (VariableAnalysis) variable importance object messaged. return function variable_analysis. ... used.","code":""},{"path":"/reference/print.VariableAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","text":"object passed input.","code":""},{"path":"/reference/print.VariableAnalysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","text":"Jackknife test, value positive, print \"/\". value negative, print \"\\\". Shapley values based test, print \"#\" since negative value order distinguish characteristic Jackknife test.","code":""},{"path":[]},{"path":"/reference/print.VariableAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print summary information from variable importance object (VariableAnalysis). — print.VariableAnalysis","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 2L,   seed = 123L, response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_analysis <- variable_analysis(   model = mod$model,   pts_occ = mod$observation,   pts_occ_test = mod$independent_test,   variables = mod$variables)  print(var_analysis) # }"},{"path":"/reference/probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate suitability on stars object using trained isolation.forest model. — probability","title":"Estimate suitability on stars object using trained isolation.forest model. — probability","text":"Apply isolation.forest model stars object calculate environmental suitability quantile stretch [0, 1].","code":""},{"path":"/reference/probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate suitability on stars object using trained isolation.forest model. — probability","text":"","code":"probability(x, vars, offset = 0)"},{"path":"/reference/probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate suitability on stars object using trained isolation.forest model. — probability","text":"x (isolation_forest). item model POIsotree made function isotree_po. vars (stars) stack environmental variables. specifically, make sure x y dimensions , distribute variables attributes stars. Otherwise, function stop. offset (numeric) offset adjust fitted suitability. default zero. Highly recommend leave default.","code":""},{"path":"/reference/probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate suitability on stars object using trained isolation.forest model. — probability","text":"stars predicted habitat suitability","code":""},{"path":[]},{"path":"/reference/probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate suitability on stars object using trained isolation.forest model. — probability","text":"","code":"if (FALSE) { # \\dontrun{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  suit <- probability(mod$model, mod$variables) } # }"},{"path":"/reference/shap_dependence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Shapley value-based variable dependence. — shap_dependence","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"Calculate species responses environmental variables using Shapley values.","code":""},{"path":"/reference/shap_dependence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"","code":"shap_dependence(   model,   var_occ,   variables,   si = 1000,   shap_nsim = 100,   visualize = FALSE,   seed = 10,   pfun = .pfun_shap )"},{"path":"/reference/shap_dependence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"model (isolation_forest model). SDM. item model POIsotree made function isotree_po. also user-fitted models long pfun can work . var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. also use item variables POIsotree made function isotree_po. si (integer) number samples generate response curves. small, response curves might biased. default value 1000. shap_nsim (integer) number Monte Carlo repetitions SHAP method use estimating Shapley value. number variables large, smaller shap_nsim used. See details documentation function explain package fastshap. default 100. visualize (logical) TRUE, plot variable dependence plots. default FALSE. seed (integer) seed random progress. default 10. pfun (function) predict function requires two arguments, object newdata. required model isolation_forest. default wrapper function designed iForest model itsdm.","code":""},{"path":"/reference/shap_dependence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"(ShapDependence) list dependences_cont (list) list Shapley values continuous variables dependences_cat (list) list Shapley values categorical variables feature_values (data.frame) table feature values","code":""},{"path":"/reference/shap_dependence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"values show environmental variable independently affects modeling prediction. show Shapley value variable changes value varied.","code":""},{"path":"/reference/shap_dependence.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"Strumbelj, Erik, Igor Kononenko. \"Explaining prediction models individual predictions feature contributions.\" Knowledge information systems 41.3 (2014): 647-665.doi:10.1007/s10115-013-0679-x Sundara rajan, Mukund, Amir Najmi. \"many Shapley values model explanation .\" International Conference Machine Learning. PMLR, 2020. https://github.com/bgreenwell/fastshap https://github.com/shap/shap","code":""},{"path":[]},{"path":"/reference/shap_dependence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Shapley value-based variable dependence. — shap_dependence","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_dependence <- shap_dependence(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables) plot(var_dependence, target_var = \"bio1\", related_var = \"bio16\") # }  if (FALSE) { # \\dontrun{ ##### Use Random Forest model as an external model ######## library(randomForest) # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>%   filter(usage == \"train\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12)) %>%   split()  model_data <- stars::st_extract(   env_vars, at = as.matrix(obs_df %>% select(x, y))) %>%   as.data.frame() names(model_data) <- names(env_vars) model_data <- model_data %>%   mutate(occ = obs_df[['observation']]) model_data$occ <- as.factor(model_data$occ)  mod_rf <- randomForest(   occ ~ .,   data = model_data,   ntree = 200)  pfun <- function(X.model, newdata) {   # for data.frame   predict(X.model, newdata, type = \"prob\")[, \"1\"] }  shap_dependences <- shap_dependence(   model = mod_rf,   var_occ = model_data %>% select(-occ),   variables = env_vars,   visualize = FALSE,   seed = 10,   pfun = pfun) } # }"},{"path":"/reference/shap_spatial_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate shapley values-based spatial response. — shap_spatial_response","title":"Calculate shapley values-based spatial response. — shap_spatial_response","text":"Calculate spatially SHAP-based response figures. can help diagnose species responses environmental variables.","code":""},{"path":"/reference/shap_spatial_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate shapley values-based spatial response. — shap_spatial_response","text":"","code":"shap_spatial_response(   model,   var_occ,   variables,   target_vars = NULL,   shap_nsim = 10,   seed = 10,   pfun = .pfun_shap )"},{"path":"/reference/shap_spatial_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate shapley values-based spatial response. — shap_spatial_response","text":"model (isolation_forest model). item model POIsotree made function isotree_po. also user-fitted models long pfun can work . var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. also use item variables POIsotree made function isotree_po. target_vars (vector character) selected variables process. NULL, variables used. shap_nsim (integer) number Monte Carlo repetitions SHAP method use estimating Shapley value. See details documentation function explain package fastshap. number variables large, smaller shap_nsim used. cautious making SHAP-based spatial dependence slow Monte-Carlo computation pixels. worth time much informative. See details documentation function explain package fastshap. default 10. Usually value 10 - 20 enough. seed (integer) seed random progress. default 10L. pfun (function) predict function requires two arguments, object newdata. required model isolation_forest. default wrapper function designed iForest model itsdm.","code":""},{"path":"/reference/shap_spatial_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate shapley values-based spatial response. — shap_spatial_response","text":"(SHAPSpatial) list list stars object spatially SHAP-based response variables","code":""},{"path":"/reference/shap_spatial_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate shapley values-based spatial response. — shap_spatial_response","text":"values show environmental variable affects modeling prediction space. maps help answer questions terms environmental response.","code":""},{"path":[]},{"path":"/reference/shap_spatial_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate shapley values-based spatial response. — shap_spatial_response","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  shap_spatial <- shap_spatial_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1)  shap_spatial <- shap_spatial_response(  model = mod$model,  target_vars = c(\"bio1\", \"bio12\"),  var_occ = mod$vars_train,  variables = mod$variables,  shap_nsim = 1)  if (FALSE) { # \\dontrun{ ##### Use Random Forest model as an external model ######## library(randomForest)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>%   filter(usage == \"train\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12)) %>%   split()  model_data <- stars::st_extract(   env_vars, at = as.matrix(obs_df %>% select(x, y))) %>%   as.data.frame() names(model_data) <- names(env_vars) model_data <- model_data %>%   mutate(occ = obs_df[['observation']]) model_data$occ <- as.factor(model_data$occ)  mod_rf <- randomForest(   occ ~ .,   data = model_data,   ntree = 200)  pfun <- function(X.model, newdata) {   # for data.frame   predict(X.model, newdata, type = \"prob\")[, \"1\"] }  shap_spatial <- shap_spatial_response(   model = mod_rf,   target_vars = c(\"bio1\", \"bio12\"),   var_occ = model_data %>% select(-occ),   variables = env_vars,   shap_nsim = 10,   pfun = pfun) } # }"},{"path":"/reference/spatial_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial response or dependence figures. — spatial_response","title":"Calculate spatial response or dependence figures. — spatial_response","text":"Calculate spatially marginal, independence, SHAP-based response figures. can help diagnose species responses environmental variables.","code":""},{"path":"/reference/spatial_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial response or dependence figures. — spatial_response","text":"","code":"spatial_response(   model,   var_occ,   variables,   shap_nsim = 0,   seed = 10L,   visualize = FALSE )"},{"path":"/reference/spatial_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial response or dependence figures. — spatial_response","text":"model (isolation_forest). item model POIsotree made function isotree_po. var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. also use item variables POIsotree made function isotree_po. shap_nsim (integer) number Monte Carlo repetitions SHAP method use estimating Shapley value. See details documentation function explain package fastshap. Set 0 want make SHAP-based spatial dependence. number variables large, smaller shap_nsim used. cautious making SHAP-based spatial dependence slow Monte-Carlo computation pixels. worth time much informative. See details documentation function explain package fastshap. default 0. Usually value 10 - 20 enough. seed (integer) seed random progress. default 10L. visualize (logical) TRUE, plot response curves. default FALSE.","code":""},{"path":"/reference/spatial_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate spatial response or dependence figures. — spatial_response","text":"(SpatialResponse) list spatial_marginal_response (list) list stars object spatially marginal response variables spatial_independent_response (list) list stars object spatially independent response variables spatial_shap_dependence (list) list stars object spatially SHAP-based response variables","code":""},{"path":"/reference/spatial_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate spatial response or dependence figures. — spatial_response","text":"values show environmental variable affects modeling prediction space. maps help answer questions terms environmental response. Compared marginal dependence independent dependence maps, SHAP-based maps way informative SHAP-based dependence explain contribution variable final result.","code":""},{"path":[]},{"path":"/reference/spatial_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial response or dependence figures. — spatial_response","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 20,   sample_size = 0.8, ndim = 1L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  spatial_responses <- spatial_response(   model = mod$model,   var_occ = mod$vars_train,   variables = mod$variables,   shap_nsim = 1) plot(spatial_responses) #'"},{"path":"/reference/suspicious_env_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"Run outlier.tree detect suspicious outliers observations.","code":""},{"path":"/reference/suspicious_env_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"","code":"suspicious_env_outliers(   occ,   occ_crs = 4326,   variables,   rm_outliers = FALSE,   seed = 10L,   ...,   visualize = TRUE )"},{"path":"/reference/suspicious_env_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"occ (data.frame, sf, SpatialPointsDataFrame) occurrence dataset training. must column x y coordinates regular data.frame. occ_crs (numeric crs) EPSG number crs object occurrence CRS. default value 4326, geographic coordinate system. variables (RasterStack stars) stack environmental variables. rm_outliers (logical) option remove suspicious outliers . default FALSE. seed (integer) random seed used modeling. integer. default 10L. ... arguments passed function outlier.tree package outliertree. visualize (logical) TRUE, plot result. default TRUE.","code":""},{"path":"/reference/suspicious_env_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"(EnvironmentalOutlier) list contains outliers (sf) sf points outliers outlier_details (tibble) table outlier details returned function outlier.tree package outliertree pts_occ (sf) sf points occurrence. rm_outliers TRUE, outliers deleted points occurrence. FALSE, full observations returned.","code":""},{"path":"/reference/suspicious_env_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"Please check details R documentation function outlier.tree package outliertree GitHub.","code":""},{"path":"/reference/suspicious_env_outliers.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"Cortes, David. \"Explainable outlier detection decision tree conditioning.\" arXiv preprint arXiv:2001.00636 (2020). https://github.com/david-cortes/outliertree","code":""},{"path":[]},{"path":"/reference/suspicious_env_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to detect suspicious outliers based on environmental variables. — suspicious_env_outliers","text":"","code":"library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12))  occ_outliers <- suspicious_env_outliers(   occ = occ_virtual_species, variables = env_vars,   z_outlier = 3.5, outliers_print = 4L, nthreads = 1)  occ_outliers plot(occ_outliers)"},{"path":"/reference/variable_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to evaluate relative importance of each variable. — variable_analysis","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"Evaluate relative importance variable within model using following methods: Jackknife test based AUC ratio Pearson correlation result model using variables SHapley Additive exPlanations (SHAP) according Shapley values","code":""},{"path":"/reference/variable_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"","code":"variable_analysis(   model,   pts_occ,   pts_occ_test = NULL,   variables,   shap_nsim = 100,   visualize = FALSE,   seed = 10 )"},{"path":"/reference/variable_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"model (isolation_forest) extended isolation forest SDM. item model POIsotree made function isotree_po. pts_occ (sf) sf style table include training occurrence locations. pts_occ_test (sf, NULL) sf style table include occurrence locations test. NULL, set var_occ. default NULL. variables (stars) stars environmental variables. multiple attributes instead dims. raster object instead, use st_as_stars convert stars use read_stars directly read source data stars. shap_nsim (integer) number Monte Carlo repetitions SHAP method use estimating Shapley value. See details documentation function explain package fastshap. visualize (logical) TRUE, plot analysis figures. default FALSE. seed (integer) seed random progress. default 10L.","code":""},{"path":"/reference/variable_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"(VariableAnalysis) list variables (vector character) names environmental variables pearson_correlation (tibble) table Jackknife test based Pearson correlation full_AUC_ratio (tibble) table AUC ratio training test dataset using variables, act references Jackknife test AUC_ratio (tibble) table Jackknife test based AUC ratio SHAP (tibble) table Shapley values training test dataset separately","code":""},{"path":"/reference/variable_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"Jackknife test variable importance reflected decrease model performance environmental variable used singly excluded environmental variable pool. function, used Pearson correlation AUC ratio. Pearson correlation correlation predictions generated different variable importance evaluation methods predictions generated full model assessment mode performance. area ROC curve (AUC) threshold-independent evaluator model performance, needs presence absence data. ROC curve generated plotting proportion correctly predicted presence y-axis 1 minus proportion correctly predicted absence x-axis thresholds. Multiple approaches used evaluate accuracy presence-models. Peterson et al. (2008) modified AUC plotting proportion correctly predicted presence proportion presences falling range thresholds proportion cells whole area falling range thresholds. called AUC ratio used package. SHapley Additive exPlanations (SHAP) uses Shapley values evaluate variable importance. larger absolute value Shapley value, important variable . Positive Shapley values mean positive affect, negative Shapely values mean negative affect. Please check references details interested .","code":""},{"path":"/reference/variable_analysis.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"Peterson, . Townsend, Monica Papeş, Jorge Soberón. \"Rethinking receiver operating characteristic analysis applications ecological niche modeling.\" Ecological modelling 213.1 (2008): 63-72.doi:10.1016/j.ecolmodel.2007.11.008 Strumbelj, Erik, Igor Kononenko. \"Explaining prediction models individual predictions feature contributions.\" Knowledge information systems 41.3 (2014): 647-665.doi:10.1007/s10115-013-0679-x Sundara rajan, Mukund, Amir Najmi. \"many Shapley values model explanation .\" International Conference Machine Learning. PMLR, 2020. https://github.com/bgreenwell/fastshap https://github.com/shap/shap","code":""},{"path":[]},{"path":"/reference/variable_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to evaluate relative importance of each variable. — variable_analysis","text":"","code":"# \\donttest{ # Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12, 16))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 10,   sample_size = 0.8, ndim = 2L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_analysis <- variable_analysis(   model = mod$model,   pts_occ = mod$observation,   pts_occ_test = mod$independent_test,   variables = mod$variables) plot(var_analysis) # }"},{"path":"/reference/variable_contrib.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate variable contributions for targeted observations. — variable_contrib","title":"Evaluate variable contributions for targeted observations. — variable_contrib","text":"Evaluate variable contribution targeted observations according SHapley Additive exPlanations (SHAP).","code":""},{"path":"/reference/variable_contrib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate variable contributions for targeted observations. — variable_contrib","text":"","code":"variable_contrib(   model,   var_occ,   var_occ_analysis,   shap_nsim = 100,   visualize = FALSE,   seed = 10,   pfun = .pfun_shap )"},{"path":"/reference/variable_contrib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate variable contributions for targeted observations. — variable_contrib","text":"model (isolation_forest model) SDM. item model POIsotree made function isotree_po. also user-fitted models long pfun can work . var_occ (data.frame, tibble) data.frame style table include values environmental variables occurrence locations. var_occ_analysis (data.frame, tibble) data.frame style table include values environmental variables occurrence locations analysis. either var_occ subset, new dataset. shap_nsim (integer) number Monte Carlo repetitions SHAP method use estimating Shapley value. See details documentation function explain package fastshap. visualize (logical) TRUE, plot response curves. default FALSE. seed (integer) seed random progress. default 10L. pfun (function) predict function requires two arguments, object newdata. required model isolation_forest. default wrapper function designed iForest model itsdm.","code":""},{"path":"/reference/variable_contrib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate variable contributions for targeted observations. — variable_contrib","text":"(VariableContribution) list shapley_values (data.frame) table Shapley values variables observations feature_values (tibble) table values variables observations","code":""},{"path":"/reference/variable_contrib.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluate variable contributions for targeted observations. — variable_contrib","text":"https://github.com/ bgreenwell/fastshap https://github.com/shap/shap","code":""},{"path":[]},{"path":"/reference/variable_contrib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate variable contributions for targeted observations. — variable_contrib","text":"","code":"# Using a pseudo presence-only occurrence dataset of # virtual species provided in this package library(dplyr) library(sf) library(stars) library(itsdm)  # Prepare data data(\"occ_virtual_species\") obs_df <- occ_virtual_species %>% filter(usage == \"train\") eval_df <- occ_virtual_species %>% filter(usage == \"eval\") x_col <- \"x\" y_col <- \"y\" obs_col <- \"observation\"  # Format the observations obs_train_eval <- format_observation(   obs_df = obs_df, eval_df = eval_df,   x_col = x_col, y_col = y_col, obs_col = obs_col,   obs_type = \"presence_only\")  env_vars <- system.file(   'extdata/bioclim_tanzania_10min.tif',   package = 'itsdm') %>% read_stars() %>%   slice('band', c(1, 5, 12))  # With imperfect_presence mode, mod <- isotree_po(   obs_mode = \"imperfect_presence\",   obs = obs_train_eval$obs,   obs_ind_eval = obs_train_eval$eval,   variables = env_vars, ntrees = 5,   sample_size = 0.8, ndim = 1L,   seed = 123L, nthreads = 1,   response = FALSE,   spatial_response = FALSE,   check_variable = FALSE)  var_contribution <- variable_contrib(   model = mod$model,   var_occ = mod$vars_train,   var_occ_analysis = mod$vars_train %>% slice(1:2)) if (FALSE) { # \\dontrun{ plot(var_contribution,   num_features = 3,   plot_each_obs = TRUE)  # Plot together plot(var_contribution) } # }"},{"path":"/reference/worldclim2.html","id":null,"dir":"Reference","previous_headings":"","what":"Download environmental variables made by worldclim version 2.1. — worldclim2","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"Parse historic worldclim version 2.1 variables setting boundary options.","code":""},{"path":"/reference/worldclim2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"","code":"worldclim2(   var = \"tmin\",   res = 10,   bry = NULL,   path = NULL,   nm_mark = \"clip\",   return_stack = TRUE )"},{"path":"/reference/worldclim2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"var (character) option variable download, one tvag, tmin, tmax, prec, srad, wind, vapr bio. default 'tmin'. res (numeric) option resolution image download. one 0.5, 2.5, 5, 10 minute degree. default 10. bry (sf) boundary mask downloaded original data. NULL, get global map. NULL, can take sf, sfc, etc. default NULL. path (character) path save downloaded imagery. NULL, use current working directory. default NULL. nm_mark (character) name mark clipped images. default \"clip\". ignored bry NULL. return_stack (logical) TRUE, stack imagery together return. area large resolution high, better stack . default TRUE.","code":""},{"path":"/reference/worldclim2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"return_stack TRUE, images returned stars. Otherwise, nothing return, user receive message images .","code":""},{"path":"/reference/worldclim2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"Web page page dataset","code":""},{"path":"/reference/worldclim2.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"fails due slow internet, try set larger timeout option, e.g., using options(timeout = 1e3).","code":""},{"path":"/reference/worldclim2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"Fick, Stephen E., Robert J. Hijmans. \"WorldClim 2: new 1-km spatial resolution climate surfaces global land areas.\" International journal climatology 37.12 (2017): 4302-4315.doi:10.1002/joc.5086","code":""},{"path":"/reference/worldclim2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download environmental variables made by worldclim version 2.1. — worldclim2","text":"","code":"if (FALSE) { # \\dontrun{ library(sf) library(itsdm)  bry <- sf::st_polygon(   list(rbind(c(29.34, -11.72), c(29.34, -0.95),              c(40.31, -0.95), c(40.31, -11.72),              c(29.34, -11.72)))) %>%   st_sfc(crs = 4326)  bios <- worldclim2(var = \"tmin\", res = 10,   bry = bry, nm_mark = 'exp', path = tempdir()) } # }"},{"path":"/news/index.html","id":"itsdm-022","dir":"Changelog","previous_headings":"","what":"itsdm 0.2.2","title":"itsdm 0.2.2","text":"CRAN release: 2025-07-01 package update. Fix package anchor issues Rd documents DOI issues DESCRIPTION.","code":""},{"path":"/news/index.html","id":"itsdm-021","dir":"Changelog","previous_headings":"","what":"itsdm 0.2.1","title":"itsdm 0.2.1","text":"CRAN release: 2023-06-10 Adapted package accommodate recent update dependency fastshap (version 0.1.0). usage functions remains unchanged. Optimized function examples meet requirements passing CRAN check.","code":""},{"path":"/news/index.html","id":"itsdm-020","dir":"Changelog","previous_headings":"","what":"itsdm 0.2.0","title":"itsdm 0.2.0","text":"CRAN release: 2023-01-15 Convert Shapley values-based functions usable external models (described issue # 3), add examples function documentation vignettes show users use functions. Add function detect_envi_change use Shapley values technique analyze potential impacts changing environmental variables space. Modify function isotree_po take presence-absence dataset well (described issue #7). make happen smoothly, another function format_observation created help users convert data fit itsdm workflow. Reorganized reference section online documentation make user-friendly. Fix bugs functions.","code":""},{"path":"/news/index.html","id":"itsdm-013","dir":"Changelog","previous_headings":"","what":"itsdm 0.1.3","title":"itsdm 0.1.3","text":"CRAN release: 2022-09-11 Fix bug function print.VariableAnalysis mentioned issue #2: value negative fail. mentioned issue #3, add sampling step function plot.ShapDependence number records larger 1000. order keep overall trend, sampling stratified bins. points cloud can clearer interpret. Modify text POEvaluation plot figure.","code":""},{"path":"/news/index.html","id":"itsdm-012","dir":"Changelog","previous_headings":"","what":"itsdm 0.1.2","title":"itsdm 0.1.2","text":"CRAN release: 2022-06-20 Fix bugs README example. Include independent function calculate continuous Boyce Index (.cont_boyce) utils.R reduce pool dependencies. Make start message simpler. Fix duplicated printout function print.POEvaluation. Use inherits function check “try-error” dataset functions.","code":""},{"path":"/news/index.html","id":"itsdm-011","dir":"Changelog","previous_headings":"","what":"itsdm 0.1.1","title":"itsdm 0.1.1","text":"CRAN release: 2022-01-11 Updated lines function evaluate_po, plot.POEvaluation, print.POEvaluation related dependency ecospat 3.2.1. now function ecospat.boyce supports Kendall method, itsdm changed use Kendall method calculate CBI. Merge pull request made David Cortes author package isotree use flexible way argument passing isolation.forest. According David Cortes’ reminder, remove argument sample_rate isotree_po. use sample_size sub-sampling.","code":""},{"path":"/news/index.html","id":"itsdm-010","dir":"Changelog","previous_headings":"","what":"itsdm 0.1.0","title":"itsdm 0.1.0","text":"CRAN release: 2022-01-07 first release. includes planned features.","code":""}]
