devtools::document()
#' The default is TRUE.
#' @return stars if return_stack is TRUE.
#' The images would be saved as separate files.
#' @references \url{https://worldclim.org/data/index.html}
#' @importFrom glue glue
#' @importFrom sf st_as_sf st_make_valid
#' @importFrom stars read_stars st_crop write_stars
#' @export
#' @examples
#' worldclim2(var = "tmin", res = 10, return_stack = FALSE)
worldclim2 <- function(var = "tmin",
res = 10,
bry = NULL,
path = NULL,
nm_mark = "clip",
return_stack = TRUE) {
# Check the inputs
## Vars
stopifnot(var %in% c(
"tavg", "tmin", "tmax", "prec",
"srad", "wind", "vapr", "bio"
))
## res
stopifnot(res %in% c(0.5, 2.5, 5, 10))
## bry
if (is.null(bry)) {
message("No bry set, download global map.")
} else {
if (!(is(bry, "sf") | is(bry, 'sfc') |
is(bry, "SpatialPolygonsDataFrame") |
is(bry, 'SpatialPolygons'))) {
stop("Only support sf or sp.")
}
}
## path
if (is.null(path)) {
path <- getwd()
} else {
if (!dir.exists(path)) {
stop("Path does not exist!")
}
}
# Set up
if (res == 0.5) {
res <- "30s"
} else {
res <- sprintf("%sm", res)
}
path <- file.path(path, "wc2.1")
dir.create(path, showWarnings = FALSE)
# Prepare url and file name
url_base <- "https://biogeo.ucdavis.edu/data/worldclim/v2.1/base"
zip_name <- sprintf("wc2.1_%s_%s.zip", res, var)
url <- file.path(url_base, zip_name)
# Download to local
temp <- tempfile()
options(timeout = 1e5)
download.file(url, temp)
# Define file number
n <- ifelse(var == "bio", 19, 12)
# Process
if (is.null(bry)) {
# More stable way to unzip a huge file
decompression <- system2("unzip",
args = c("-j", "-o", temp, sprintf("-d %s", path)),
stdout = TRUE)
if (grepl("Warning message", tail(decompression, 1))) {
print(decompression)
}
unlink(temp)
if (return_stack == TRUE) {
## Check unzip files
imgs_in <- list.files(
path,
pattern = "*.tif", full.names = T
)
if(var == 'bio'){
imgs <- file.path(
path, sprintf("wc2.1_%s_%s_%s.tif", res, var, 1:n)
)
} else {
imgs <- file.path(
path, sprintf("wc2.1_%s_%s_%02d.tif", res, var, 1:n)
)
}
if (length(intersect(imgs, imgs_in)) != n) {
stop("Wrong file numbers unzipped.")
}
## Read imgs as stars
if (return_stack == TRUE) clip_imgs <- read_stars(imgs)
}
} else {
# Unzip to a temporary path
## Define temp dir
temp_path <- file.path(path, "global")
dir.create(temp_path, showWarnings = FALSE)
## Unzip
decompression <- system2(
"unzip",
args = c("-j", "-o", temp, sprintf("-d %s", temp_path)),
stdout = TRUE)
if (grepl("Warning message", tail(decompression, 1))) {
print(decompression)
}
unlink(temp)
# Clip the imagery to the boundary
## Check unzip files
imgs_in <- list.files(temp_path, pattern = "*.tif", full.names = T)
if(var == 'bio'){
imgs <- file.path(
temp_path, sprintf("wc2.1_%s_%s_%s.tif", res, var, 1:n)
)
} else {
imgs <- file.path(
temp_path, sprintf("wc2.1_%s_%s_%02d.tif", res, var, 1:n)
)
}
if (length(intersect(imgs, imgs_in)) != n) {
stop("Wrong file numbers unzipped.")}
## Read imgs as stars and clip
clip_imgs <- read_stars(imgs)
bry <- st_as_sf(bry) %>% st_make_valid()
clip_imgs <- st_crop(clip_imgs, bry)
## Save out
invisible(lapply(1:n, function(n) {
rst_name <- paste(nm_mark, names(clip_imgs)[n], sep = "_")
rst_path <- file.path(path, rst_name)
write_stars(clip_imgs, rst_path, layer = n)
}))
## Clean the temp folder
unlink(temp_path, recursive = TRUE)
if (return_stack != TRUE) rm(clip_imgs)
}
if (return_stack == TRUE) {
names(clip_imgs) <- paste0(var, 1:n)
clip_imgs <- merge(clip_imgs, name = 'band')
names(clip_imgs) <- sprintf("wc2.1_%s_%s.tif", res, var)
clip_imgs
} else {
message(glue("Files are written to {path}."))
}
}
bios <- worldclim2(var = "bio", res = 10)
library(glue)
library(sf)
library(stars)
bios <- worldclim2(var = "bio", res = 10)
bios
img_stack <- bios
library(rnaturalearth)
library(dplyr)
############Get boundaries##############
# Get Africa continent
af <- ne_countries(
continent = 'africa', returnclass = 'sf') %>%
filter(admin != 'Madagascar') # remove Madagascar
# Union countries to continent
af_bry <- st_buffer(af, 0.1) %>%
st_union() %>%
st_as_sf() %>%
rename(geometry = x)
threshold <- 0.7
samples <- NULL
# Check inputs
stopifnot(is.numeric(threshold) & between(threshold, 0, 1))
stopifnot(is(img_stack, 'stars') | is(img_stack, 'raster'))
if (is.null(samples)) {
message("No samples set, use whole image.")
} else{
if (!(is(samples, "sf") | is(samples, 'sfc') |
is(samples, 'SpatialPoints') |
is(samples, "SpatialPointsDataFrame"))) {
stop("Only support sf or sp.")
}
}
# Convert to raster to calculate correlations
if_stars <- is(img_stack, 'stars')
if (if_stars) {
if (length(dim(img_stack)) == 2) {
img_stack <- stack(as(img_stack, 'Spatial'))
} else {
img_stack <- stack(as(split(img_stack), 'Spatial'))
}
}
if (!is.null(samples)){
samples <- st_as_sf(samples)
samples <- rasterize(samples, img_stack[[1]], 1)
img_stack <- mask(img_stack, samples)
}
# Calculate correlations
stat <- "pearson" # Just use pearson because it is standardized.
cors <- layerStats(img_stack, stat, na.rm = T)
cors <- data.frame(cors[[1]])
library(raster)
cors <- layerStats(img_stack, stat, na.rm = T)
cors
# Calculate correlations
stat <- "pearson" # Just use pearson because it is standardized.
img_stack
bios
# Convert to raster to calculate correlations
if_stars <- is(img_stack, 'stars')
if_stars
is.null(samples)
!is.null(samples)
if (!is.null(samples)){
samples <- st_as_sf(samples)
samples <- rasterize(samples, img_stack[[1]], 1)
img_stack <- mask(img_stack, samples)
}
# Calculate correlations
stat <- "pearson" # Just use pearson because it is standardized.
cors <- layerStats(img_stack, stat, na.rm = T)
?layerStats
img_stack
img_stack <- bios
# Convert to raster to calculate correlations
if_stars <- is(img_stack, 'stars')
if (if_stars) {
if (length(dim(img_stack)) == 2) {
img_stack <- stack(as(img_stack, 'Spatial'))
} else {
img_stack <- stack(as(split(img_stack), 'Spatial'))
}
}
if_stars
img_stack
img_stack[[1]]
if (!is.null(samples)){
samples <- st_as_sf(samples)
samples <- rasterize(samples, img_stack[[1]], 1)
img_stack <- mask(img_stack, samples)
}
img_stack
# Calculate correlations
stat <- "pearson" # Just use pearson because it is standardized.
cors <- layerStats(img_stack, stat, na.rm = T)
cors <- data.frame(cors[[1]])
ps_cor <- cors
for (i in 1:ncol(ps_cor)){
if(i > ncol(ps_cor)){
break}
row_index <- which(abs(ps_cor[, i]) > threshold &
abs(ps_cor[, i]) < 1)
if(!is_empty(row_index)) ps_cor <- ps_cor[-row_index, -row_index]
}
?is_empty
library(purrr)
for (i in 1:ncol(ps_cor)){
if(i > ncol(ps_cor)){
break}
row_index <- which(abs(ps_cor[, i]) > threshold &
abs(ps_cor[, i]) < 1)
if(!is_empty(row_index)) ps_cor <- ps_cor[-row_index, -row_index]
}
ps_cor
# Subset images and make object
img_reduced <- subset(img_stack, row.names(ps_cor))
if (if_stars) img_reduced <- st_as_stars(img_reduced)
img_reduced
img_reduced <- list(img_reduced = img_reduced,
cors_original = cors,
cors_reduced = ps_cor)
class(img_reduced) <- 'ReducedImageStack'
img_reduced
print(img_reduced$cors_reduced)
clip_imgs
devtools::document()
rm(list = c("worldclim2"))
devtools::document()
?as
?st_crop
devtools::document()
itsdm::worldclim2(var = 'bio', bry = af_bry)
bios <- itsdm::worldclim2(var = 'bio', bry = af_bry)
bios_reduce <- dim_reduce(bios, threshold = 0.7)
devtools::document()
bios_reduce <- dim_reduce(bios, threshold = 0.7)
devtools::document()
bios_reduce <- dim_reduce(bios, threshold = 0.7)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
bios <- itsdm::worldclim2(var = 'bio', bry = af_bry)
library(rnaturalearth)
library(dplyr)
############Get boundaries##############
# Get Africa continent
af <- ne_countries(
continent = 'africa', returnclass = 'sf') %>%
filter(admin != 'Madagascar') # remove Madagascar
# Union countries to continent
af_bry <- st_buffer(af, 0.1) %>%
st_union() %>%
st_as_sf() %>%
rename(geometry = x)
librayr(sf)
librayr(sf)
library(sf)
library(rnaturalearth)
library(dplyr)
############Get boundaries##############
# Get Africa continent
af <- ne_countries(
continent = 'africa', returnclass = 'sf') %>%
filter(admin != 'Madagascar') # remove Madagascar
# Union countries to continent
af_bry <- st_buffer(af, 0.1) %>%
st_union() %>%
st_as_sf() %>%
rename(geometry = x)
bios <- itsdm::worldclim2(var = 'bio', bry = af_bry)
bios <- itsdm::worldclim2(var = 'bio', bry = af_bry)
bios_reduce <- dim_reduce(bios, threshold = 0.7)
bios_reduce
load_all()
devtools::document()
